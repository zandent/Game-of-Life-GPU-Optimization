#include <cuda_runtime.h>
#include <sys/time.h>
#include <stdio.h>
#include "util.h"

extern "C" {
	#include "life_opt.h"
}
extern "C"

static double getTimeStamp() {
    struct timeval tv ;
    gettimeofday( &tv, NULL ) ;
    return (double) tv.tv_usec/1000000.0 + tv.tv_sec ;
}

// 1: brute force implementation
// 2: bit implementation
// 3: lookup table 4 bits
// 4: lookup table 2 bits with const mem
// 5: lookup table 2 bits compact with const mem
// 6: lookup table 1 bit with const mem
// 7: lookup table 1 bit compact with const mem
// 8: add stream pipeline based on 5 
// 9: share mem replace inboard based on 8
// 10: share mem creates LUT to replace LUT based on 8 OR directly move const content to sharemem to replace. Both slow!
// 11: insert top/bot rows to input, based on 5 //FASTEST
//**************************
#define GPU_IMPL_VERSION 11
//**************************


////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// LOOKUP TABLE 2 BIT COMPACT CONST MEM IMPLEMENTATION, NO OPTIMIZATION ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
#if GPU_IMPL_VERSION == 11
#define BYTES_WINDOW 8
#define BYTES_PER_THREAD 1
#define LIVECHECK(count, state) ((!state && (count == (char) 3)) ||(state && (count >= 2) && (count <= 3)))
#define COMPUTESTATE(x,y,index) ((index >> ((3 * 4 - 1) - (x+4*y))) & 0x1)

__constant__ __device__ unsigned char lookUpTable [1024] = {
0x0,0x1,0x0,0xb,0x1,0x14,0x1,0x1e,0x1,0x1f,0xb,0xb5,0x15,0x5e,0x1f,0xf4,0x1,0x1e,0xb,0xbe,0x14,0x4a,0x1e,0xea,0x1f,0xfe,0xbf,0xf4,0x5e,0xea,0xfe,0xe0,0x0,0xb,0xa,0xa1,0x1,0x1e,0xb,0xb4,0xb,0xb5,0xa1,0x15,0x1f,0xf4,0xb5,0x54,0xb,0xbe,0xab,0xb4,0x1e,0xea,0xbe,0xe0,0xbf,0xf4,0xb5,0x54,0xfe,0xe0,0xf4,0x40,0x1,0x14,0x1,0x1e,0x14,0x40,0x14,0x4a,0x15,0x5e,0x1f,0xf4,0x54,0x4a,0x5e,0xe0,0x14,0x4a,0x1e,0xea,0x40,0xa,0x4a,0xaa,0x5e,0xea,0xfe,0xe0,0x4a,0xaa,0xea,0xa0,0x1,0x1e,0xb,0xb4,0x14,0x4a,0x1e,0xe0,0x1f,0xf4,0xb5,0x54,0x5e,0xe0,0xf4,0x40,0x1e,0xea,0xbe,0xe0,0x4a,0xaa,0xea,0xa0,0xfe,0xe0,0xf4,0x40,0xea,0xa0,0xe0,0x0,0x1,0x1e,0xb,0xb4,0x14,0x4a,0x1e,0xe0,0x1f,0xf4,0xb5,0x54,0x5e,0xe0,0xf4,0x40,0x1e,0xea,0xbe,0xe0,0x4a,0xaa,0xea,0xa0,0xfe,0xe0,0xf4,0x40,0xea,0xa0,0xe0,0x0,0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0x14,0x4a,0x1e,0xe0,0x40,0xa,0x4a,0xa0,0x5e,0xe0,0xf4,0x40,0x4a,0xa0,0xe0,0x0,0x4a,0xaa,0xea,0xa0,0xa,0xaa,0xaa,0xa0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,
0x1,0x1e,0xb,0xb4,0x14,0x4a,0x1e,0xe0,0x1f,0xf4,0xb5,0x54,0x5e,0xe0,0xf4,0x40,0x1e,0xea,0xbe,0xe0,0x4a,0xaa,0xea,0xa0,0xfe,0xe0,0xf4,0x40,0xea,0xa0,0xe0,0x0,0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0x14,0x4a,0x1e,0xe0,0x40,0xa,0x4a,0xa0,0x5e,0xe0,0xf4,0x40,0x4a,0xa0,0xe0,0x0,0x4a,0xaa,0xea,0xa0,0xa,0xaa,0xaa,0xa0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x4a,0xa0,0xe0,0x0,0xa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0xaa,0xa0,0xa0,0x0,0xaa,0xa0,0xa0,0x0,0xa0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0xb,0xa,0xa1,0x1,0x1e,0xb,0xb4,0xb,0xb5,0xa1,0x15,0x1f,0xf4,0xb5,0x54,0xb,0xbe,0xab,0xb4,0x1e,0xea,0xbe,0xe0,0xbf,0xf4,0xb5,0x54,0xfe,0xe0,0xf4,0x40,0xa,0xa1,0xa0,0x1,0xb,0xb4,0xa1,0x14,0xa1,0x15,0x1,0x15,0xb5,0x54,0x15,0x54,0xab,0xb4,0xa1,0x14,0xbe,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0x1,0x1e,0xb,0xb4,0x14,0x4a,0x1e,0xe0,0x1f,0xf4,0xb5,0x54,0x5e,0xe0,0xf4,0x40,0x1e,0xea,0xbe,0xe0,0x4a,0xaa,0xea,0xa0,0xfe,0xe0,0xf4,0x40,0xea,0xa0,0xe0,0x0,0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xa1,0x14,0x1,0x14,0xb4,0x40,0x14,0x40,0x15,0x54,0x15,0x54,0x54,0x40,0x54,0x40,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,
0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xa1,0x14,0x1,0x14,0xb4,0x40,0x14,0x40,0x15,0x54,0x15,0x54,0x54,0x40,0x54,0x40,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x14,0x40,0x14,0x40,0x40,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
};

unsigned char lookUpTable_CPU [4096] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x3,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x3,0x2,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x3,0x2,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x0,0x1,0x3,0x3,0x3,0x3,0x3,0x2,0x2,0x3,0x3,0x3,0x3,0x3,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x0,0x0,0x2,0x2,0x2,0x2,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x1,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x3,0x2,0x2,0x2,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,
0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x1,0x1,0x1,0x1,0x3,0x2,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x1,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x1,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x0,0x0,0x2,0x2,0x2,0x2,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x1,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x3,0x2,0x2,0x2,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x0,0x1,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x1,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x1,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,
0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
};

void ByteToBitCell(char* in, unsigned char* out, int row, int col, int colInBytes){
  memset(out,0,row*colInBytes*sizeof(char));
  for(int i = 0; i < row; i ++){
    for(int j = 0; j < colInBytes; j++){
      for(int k = 0; k < BYTES_WINDOW; k ++){
        //TODO: care about padding if remaining bits exist
        out[j+i*colInBytes] |= (in[k + j*BYTES_WINDOW + i*col] << (BYTES_WINDOW-k-1));
      }
    }
  }
}
void BitCellToByte(unsigned char* in, char* out, int row, int col, int colInBytes){
  for(int i = 0; i < row; i ++){
    for(int j = 0; j < colInBytes; j++){
      for(int k = 0; k < BYTES_WINDOW; k ++){
        if((k + j*BYTES_WINDOW + i*col) < row*col){
          out[k + j*BYTES_WINDOW + i*col] = (in[j+i*colInBytes] >> (BYTES_WINDOW-k-1)) & 0x01;
        }
      }
    }
  }
}
//helper function to convert loopUpTable to compact 
void LookUpTableToFileCompact() {
  FILE* fptr;
  fptr = fopen("lookUpTable_compact.cuh","w");
  fprintf(fptr,"__constant__ __device__ unsigned char lookUpTable [1024] = {\n");
  unsigned int i = 0;
  for (i = 0; i < 1024; i++){
    unsigned char state = 0x00;
    for(int j = 0; j < 4; j++){
      state |= ((lookUpTable_CPU[i*4 + j] & 0x03) << (6-j*2));
    }
    fprintf(fptr,"0x%x,", state);
    if(i%256==255){
      fprintf(fptr,"\n");
    }
  }
  fprintf(fptr,"};\n");
  fclose(fptr);
}
//helper function to build loopUpTable header file
void LookUpTableToFile() {
  FILE* fptr;
  fptr = fopen("lookUpTable.cuh","w");
  fprintf(fptr,"__constant__ __device__ unsigned char lookUpTable [4096] = {\n");
  unsigned int tableIndex = 0;
  for (tableIndex = 0; tableIndex < 4096; tableIndex++){
    unsigned char state = 0x00;
    for(int i = 0; i < 2; i++){
      char count = 0x00;
      count += COMPUTESTATE(i+0,0,tableIndex);
      count += COMPUTESTATE(i+0,1,tableIndex);
      count += COMPUTESTATE(i+0,2,tableIndex);
      count += COMPUTESTATE(i+1,0,tableIndex);
      char centerState = COMPUTESTATE(i+1,1,tableIndex);
      count += COMPUTESTATE(i+1,2,tableIndex);
      count += COMPUTESTATE(i+2,0,tableIndex);
      count += COMPUTESTATE(i+2,1,tableIndex);
      count += COMPUTESTATE(i+2,2,tableIndex);
      state |= (LIVECHECK(count,centerState)<<(1-i));
    }
    fprintf(fptr,"0x%x,", state);
    if(tableIndex%256==255){
      fprintf(fptr,"\n");
    }
  }
  fprintf(fptr,"};\n");
  fclose(fptr);
}
__global__ void InitLookUpTable(unsigned char* h_lookUpTable) {
  unsigned int tableIndex = blockIdx.x*blockDim.x + threadIdx.x;
  if(tableIndex < 4096){
   unsigned char state = 0x00;
   for(int i = 0; i < 2; i++){
     char count = 0x00;
     count += COMPUTESTATE(i+0,0,tableIndex);
     count += COMPUTESTATE(i+0,1,tableIndex);
     count += COMPUTESTATE(i+0,2,tableIndex);
     count += COMPUTESTATE(i+1,0,tableIndex);
     char centerState = COMPUTESTATE(i+1,1,tableIndex);
     count += COMPUTESTATE(i+1,2,tableIndex);
     count += COMPUTESTATE(i+2,0,tableIndex);
     count += COMPUTESTATE(i+2,1,tableIndex);
     count += COMPUTESTATE(i+2,2,tableIndex);
     state |= (LIVECHECK(count,centerState)<<(1-i));
   }
   h_lookUpTable[tableIndex] = state;
  }
}
__global__ void kernal(unsigned char* outboard, unsigned char* inboard, const int nrows, const int ncolsInBytes, const int noRemainBits){
  int ix = (threadIdx.x + blockIdx.x*blockDim.x)*BYTES_PER_THREAD;
  int iy = threadIdx.y + blockIdx.y*blockDim.y;
  if(ix<ncolsInBytes && iy<nrows){
    int lx = (ix+ncolsInBytes-1)%ncolsInBytes;
    int uy = iy;//(iy+nrows-1)%nrows;
    iy = iy + 1;
    int dy = iy + 1;//(iy+1)%nrows;
    uint row0 = (uint) inboard[lx+ncolsInBytes*uy] << 16;
    uint row1 = (uint) inboard[lx+ncolsInBytes*iy] << 16;
    uint row2 = (uint) inboard[lx+ncolsInBytes*dy] << 16;
    row0 |= (uint) inboard[ix+ncolsInBytes*uy] << 8;
    row1 |= (uint) inboard[ix+ncolsInBytes*iy] << 8;
    row2 |= (uint) inboard[ix+ncolsInBytes*dy] << 8;
    int base_x = ix;
    int pre_x;
    for(int i = 0; i < BYTES_PER_THREAD; i++){
      if((base_x + i*BYTES_PER_THREAD) < ncolsInBytes){
        pre_x = ix;
        ix = (ix + 1)%ncolsInBytes;
        row0 |= (uint) inboard[ix+ncolsInBytes*uy];
        row1 |= (uint) inboard[ix+ncolsInBytes*iy];
        row2 |= (uint) inboard[ix+ncolsInBytes*dy];
        if(pre_x == ncolsInBytes-1){
          int mask = ~(0x01<<(noRemainBits + 7));
          row0 &= mask;
          row1 &= mask;
          row2 &= mask;
          row0 |= ((uint) inboard[ix+ncolsInBytes*uy] & 0x80) << noRemainBits;
          row1 |= ((uint) inboard[ix+ncolsInBytes*iy] & 0x80) << noRemainBits;
          row2 |= ((uint) inboard[ix+ncolsInBytes*dy] & 0x80) << noRemainBits;
        }
        unsigned int states0 = ((row0 & 0x1E000) >> 5) | ((row1 & 0x1E000) >> 9) | ((row2 & 0x1E000) >> 13);
        unsigned int states1 = ((row0 & 0x7800) >> 3) | ((row1 & 0x7800) >> 7) | ((row2 & 0x7800) >> 11);
        unsigned int states2 = ((row0 & 0x1E00) >> 1) | ((row1 & 0x1E00) >> 5) | ((row2 & 0x1E00) >> 9);
        unsigned int states3 = ((row0 & 0x780) << 1) | ((row1 & 0x780) >> 3) | ((row2 & 0x780) >> 7);
        unsigned char states0_shift = 6 - 2*(states0 & 0x03);
        unsigned char states1_shift = 6 - 2*(states1 & 0x03);
        unsigned char states2_shift = 6 - 2*(states2 & 0x03);
        unsigned char states3_shift = 6 - 2*(states3 & 0x03);
        outboard[pre_x + ncolsInBytes*iy] = (((lookUpTable[states0 >> 2]>>states0_shift)&0x03)<<6) |
                                            (((lookUpTable[states1 >> 2]>>states1_shift)&0x03)<<4) | 
                                            (((lookUpTable[states2 >> 2]>>states2_shift)&0x03)<<2) | 
                                            (((lookUpTable[states3 >> 2]>>states3_shift)&0x03));
        if(iy==1){outboard[pre_x + ncolsInBytes*(nrows+1)]=outboard[pre_x + ncolsInBytes*iy];}
        else if(iy==nrows){outboard[pre_x]=outboard[pre_x + ncolsInBytes*iy];}
      }
    }
  }
}

////////// Game of life implementation //////////
char* game_of_life_gpu (char* outboard, char* inboard, const int nrows, const int ncols, const int gens_max){
  debug_print("================== DEBUG MODE ===================\n");
  debug_print("we're in game_of_life_gpu! # iters = %d\n", gens_max);
  double timeStampA = getTimeStamp() ;

  // generate compact look up table
  // LookUpTableToFileCompact();
  // cudaDeviceSynchronize();
  // return outboard;

  int ncolsInBytes = ((ncols+BYTES_WINDOW-1)/BYTES_WINDOW);
  int noRemainBits = ncols%BYTES_WINDOW;
  int size = ncolsInBytes*(nrows + 2);
  int bytes = size*sizeof(char);
  unsigned char *d_bufA, *d_bufB;
  unsigned char parsed_inboard[size];
  unsigned char parsed_outboard[size];
  ByteToBitCell(inboard, &parsed_inboard[ncolsInBytes], nrows, ncols, ncolsInBytes);
  memcpy(parsed_inboard, &parsed_inboard[(nrows)*ncolsInBytes], ncolsInBytes);
  memcpy(&parsed_inboard[(nrows+1)*ncolsInBytes], &parsed_inboard[ncolsInBytes], ncolsInBytes);
  cudaMalloc((void **)&d_bufA,bytes);
  cudaMalloc((void **)&d_bufB,bytes);
  cudaMemcpy( d_bufA, parsed_inboard, bytes, cudaMemcpyHostToDevice);
  //TODO: Hardcode lookupTable in const memory
  // unsigned char* d_lookUpTable;
  // cudaMalloc((void **)&d_lookUpTable,4096*sizeof(unsigned char));
  // InitLookUpTable<<<4, 1024>>>(d_lookUpTable);
  // cudaDeviceSynchronize() ;
  //debug_print("lkt size %d %d\n", 262144*sizeof(unsigned char), sizeof(d_lookUpTable));
  //for (int i = 0; i < 262144; i++){ 
  //  debug_print("index %d\n",i);
  //  for (int ii = 0; ii < 8; ii++) {
  //    debug_print("%d", !!((d_lookUpTable[i] << ii) & 0x80));
  //  }
  //  debug_print("\n");
  //}
  dim3 block(32,32);
  dim3 grid(((ncolsInBytes+BYTES_PER_THREAD-1)/BYTES_PER_THREAD+block.x-1)/block.x,(nrows + block.y-1)/block.y);
  for (int curgen = 0; curgen < gens_max; curgen++){
    kernal<<<grid,block>>>(d_bufB, d_bufA, nrows, ncolsInBytes, noRemainBits);
    cudaDeviceSynchronize() ;
    //SWAP BOARDS
    unsigned char * temp = d_bufA;
    d_bufA = d_bufB;
    d_bufB = temp;
  }
  cudaMemcpy(parsed_outboard, d_bufA, bytes, cudaMemcpyDeviceToHost);
  BitCellToByte(&parsed_outboard[ncolsInBytes], outboard, nrows, ncols, ncolsInBytes);
    
  double timeStampD = getTimeStamp() ;
  double total_time = timeStampD - timeStampA;
  printf("GPU game_of_life: %.6f\n", total_time);
  return outboard;
}
#endif //GPU_IMPL_VERSION == 11



////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// SHARE MEM LOOKUP TABLE 2 BIT COMPACT CONST MEM IMPLEMENTATION WITH STREAMS, SHAREMEM ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
#if GPU_IMPL_VERSION == 10
#define BYTES_WINDOW 8
#define BYTES_PER_THREAD 1 //FIXED DO NOT CHANGE
#define LIVECHECK(count, state) ((!state && (count == (char) 3)) ||(state && (count >= 2) && (count <= 3)))
#define COMPUTESTATE(x,y,index) ((index >> ((3 * 4 - 1) - (x+4*y))) & 0x1)

__constant__ __device__ unsigned char lookUpTable [1024] = {
0x0,0x1,0x0,0xb,0x1,0x14,0x1,0x1e,0x1,0x1f,0xb,0xb5,0x15,0x5e,0x1f,0xf4,0x1,0x1e,0xb,0xbe,0x14,0x4a,0x1e,0xea,0x1f,0xfe,0xbf,0xf4,0x5e,0xea,0xfe,0xe0,0x0,0xb,0xa,0xa1,0x1,0x1e,0xb,0xb4,0xb,0xb5,0xa1,0x15,0x1f,0xf4,0xb5,0x54,0xb,0xbe,0xab,0xb4,0x1e,0xea,0xbe,0xe0,0xbf,0xf4,0xb5,0x54,0xfe,0xe0,0xf4,0x40,0x1,0x14,0x1,0x1e,0x14,0x40,0x14,0x4a,0x15,0x5e,0x1f,0xf4,0x54,0x4a,0x5e,0xe0,0x14,0x4a,0x1e,0xea,0x40,0xa,0x4a,0xaa,0x5e,0xea,0xfe,0xe0,0x4a,0xaa,0xea,0xa0,0x1,0x1e,0xb,0xb4,0x14,0x4a,0x1e,0xe0,0x1f,0xf4,0xb5,0x54,0x5e,0xe0,0xf4,0x40,0x1e,0xea,0xbe,0xe0,0x4a,0xaa,0xea,0xa0,0xfe,0xe0,0xf4,0x40,0xea,0xa0,0xe0,0x0,0x1,0x1e,0xb,0xb4,0x14,0x4a,0x1e,0xe0,0x1f,0xf4,0xb5,0x54,0x5e,0xe0,0xf4,0x40,0x1e,0xea,0xbe,0xe0,0x4a,0xaa,0xea,0xa0,0xfe,0xe0,0xf4,0x40,0xea,0xa0,0xe0,0x0,0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0x14,0x4a,0x1e,0xe0,0x40,0xa,0x4a,0xa0,0x5e,0xe0,0xf4,0x40,0x4a,0xa0,0xe0,0x0,0x4a,0xaa,0xea,0xa0,0xa,0xaa,0xaa,0xa0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,
0x1,0x1e,0xb,0xb4,0x14,0x4a,0x1e,0xe0,0x1f,0xf4,0xb5,0x54,0x5e,0xe0,0xf4,0x40,0x1e,0xea,0xbe,0xe0,0x4a,0xaa,0xea,0xa0,0xfe,0xe0,0xf4,0x40,0xea,0xa0,0xe0,0x0,0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0x14,0x4a,0x1e,0xe0,0x40,0xa,0x4a,0xa0,0x5e,0xe0,0xf4,0x40,0x4a,0xa0,0xe0,0x0,0x4a,0xaa,0xea,0xa0,0xa,0xaa,0xaa,0xa0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x4a,0xa0,0xe0,0x0,0xa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0xaa,0xa0,0xa0,0x0,0xaa,0xa0,0xa0,0x0,0xa0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0xb,0xa,0xa1,0x1,0x1e,0xb,0xb4,0xb,0xb5,0xa1,0x15,0x1f,0xf4,0xb5,0x54,0xb,0xbe,0xab,0xb4,0x1e,0xea,0xbe,0xe0,0xbf,0xf4,0xb5,0x54,0xfe,0xe0,0xf4,0x40,0xa,0xa1,0xa0,0x1,0xb,0xb4,0xa1,0x14,0xa1,0x15,0x1,0x15,0xb5,0x54,0x15,0x54,0xab,0xb4,0xa1,0x14,0xbe,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0x1,0x1e,0xb,0xb4,0x14,0x4a,0x1e,0xe0,0x1f,0xf4,0xb5,0x54,0x5e,0xe0,0xf4,0x40,0x1e,0xea,0xbe,0xe0,0x4a,0xaa,0xea,0xa0,0xfe,0xe0,0xf4,0x40,0xea,0xa0,0xe0,0x0,0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xa1,0x14,0x1,0x14,0xb4,0x40,0x14,0x40,0x15,0x54,0x15,0x54,0x54,0x40,0x54,0x40,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,
0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xa1,0x14,0x1,0x14,0xb4,0x40,0x14,0x40,0x15,0x54,0x15,0x54,0x54,0x40,0x54,0x40,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x14,0x40,0x14,0x40,0x40,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
};
void ByteToBitCell(char* in, unsigned char* out, int row, int col, int colInBytes){
  memset(out,0,row*colInBytes*sizeof(char));
  //unsigned char* out_offset = out + col;
  for(int i = 0; i < row; i ++){
    for(int j = 0; j < colInBytes; j++){
      for(int k = 0; k < BYTES_WINDOW; k ++){
        //TODO: care about padding if remaining bits exist
        out[j+(i+1)*colInBytes] |= (in[k + j*BYTES_WINDOW + i*col] << (BYTES_WINDOW-k-1));
      }
    }
  }
  for(int j = 0; j < colInBytes; j++){
    for(int k = 0; k < BYTES_WINDOW; k ++){
      //TODO: care about padding if remaining bits exist
      out[j+0*colInBytes] |= (in[k + j*BYTES_WINDOW +(row-1)*col] << (BYTES_WINDOW-k-1));
      out[j+(row+1)*colInBytes] |= (in[k + j*BYTES_WINDOW + 0*col] << (BYTES_WINDOW-k-1));
    }
  }
#ifdef DEBUG
  for(int i = 0; i < row + 2; i ++){
    for(int j = 0; j < colInBytes; j++){
        //printf("%d ", in[k + j*BYTES_WINDOW + i*col]);
        for (int ii = 0; ii < 8; ii++) {
          //printf("%d", !!((out[j+i*colInBytes] << ii) & 0x80));
        }
        //printf("\n");
    }
  }
#endif
}
void BitCellToByte(unsigned char* in, char* out, int row, int col, int colInBytes){
  for(int i = 0; i < row; i ++){
    for(int j = 0; j < colInBytes; j++){
      for(int k = 0; k < BYTES_WINDOW; k ++){
        if((k + j*BYTES_WINDOW + i*col) < row*col){
          out[k + j*BYTES_WINDOW + i*col] = (in[j+i*colInBytes] >> (BYTES_WINDOW-k-1)) & 0x01;
        }
      }
    }
  }
}
//Method #1: create LUT in SM
__device__ void SharedLUT(unsigned char* sm, int smx, int smy){
  unsigned int tableIndex = 0;
  unsigned char stateCombine = 0x00;
  int j = 0;
  for (tableIndex = (smx + blockDim.x*smy)*4; tableIndex < ((smx+blockDim.x*smy)*4+4) && tableIndex < 4096; tableIndex++){
  unsigned char state = 0x00;
  for(int i = 0; i < 2; i++){
    char count = 0x00;
    count += COMPUTESTATE(i+0,0,tableIndex);
    count += COMPUTESTATE(i+0,1,tableIndex);
    count += COMPUTESTATE(i+0,2,tableIndex);
    count += COMPUTESTATE(i+1,0,tableIndex);
    char centerState = COMPUTESTATE(i+1,1,tableIndex);
    count += COMPUTESTATE(i+1,2,tableIndex);
    count += COMPUTESTATE(i+2,0,tableIndex);
    count += COMPUTESTATE(i+2,1,tableIndex);
    count += COMPUTESTATE(i+2,2,tableIndex);
    state |= (LIVECHECK(count,centerState)<<(1-i));
  }
  stateCombine |= ((state & 0x03) << (6-j*2));
  j++;
  }
  sm[smx+blockDim.x*smy] = stateCombine;
}
//Method #2: move const LUT to sm
__device__ void ConstToShared(unsigned char* sm, int smx, int smy){
  sm[smx+blockDim.x*smy] = lookUpTable[smx+blockDim.x*smy];
}
__global__ void kernal(unsigned char* outboard, unsigned char* inboard, const int start_index, const int row_size, const int nrows, const int ncolsInBytes, const int noRemainBits){
  int ix = (threadIdx.x + blockIdx.x*blockDim.x)*BYTES_PER_THREAD;
  int iy = threadIdx.y + blockIdx.y*blockDim.y + start_index;
  //__shared__ unsigned char tempLUT[4096];
  __shared__ unsigned char LUT[1024];
  ConstToShared(LUT,threadIdx.x,threadIdx.y);
  __syncthreads();
  //SharedLUTSecond(LUT,tempLUT,threadIdx.x,threadIdx.y);
  //__syncthreads();
  if(ix<ncolsInBytes && iy<row_size+start_index){
    int lx = (ix+ncolsInBytes-1)%ncolsInBytes;
    int uy = iy-1;
    int dy = iy+1;
    uint row0 = (uint) inboard[lx+ncolsInBytes*uy] << 16;
    uint row1 = (uint) inboard[lx+ncolsInBytes*iy] << 16;
    uint row2 = (uint) inboard[lx+ncolsInBytes*dy] << 16;
    row0 |= (uint) inboard[ix+ncolsInBytes*uy] << 8;
    row1 |= (uint) inboard[ix+ncolsInBytes*iy] << 8;
    row2 |= (uint) inboard[ix+ncolsInBytes*dy] << 8;
    int base_x = ix;
    int pre_x;
    for(int i = 0; i < BYTES_PER_THREAD; i++){
      if((base_x + i*BYTES_PER_THREAD) < ncolsInBytes){
        pre_x = ix;
        ix = (ix + 1)%ncolsInBytes;
        row0 |= (uint) inboard[ix+ncolsInBytes*uy];
        row1 |= (uint) inboard[ix+ncolsInBytes*iy];
        row2 |= (uint) inboard[ix+ncolsInBytes*dy];
        if(pre_x == ncolsInBytes-1){
          int mask = ~(0x01<<(noRemainBits + 7));
          row0 &= mask;
          row1 &= mask;
          row2 &= mask;
          row0 |= ((uint) inboard[ix+ncolsInBytes*uy] & 0x80) << noRemainBits;
          row1 |= ((uint) inboard[ix+ncolsInBytes*iy] & 0x80) << noRemainBits;
          row2 |= ((uint) inboard[ix+ncolsInBytes*dy] & 0x80) << noRemainBits;
        }
        unsigned int states0 = ((row0 & 0x1E000) >> 5) | ((row1 & 0x1E000) >> 9) | ((row2 & 0x1E000) >> 13);
        unsigned int states1 = ((row0 & 0x7800) >> 3) | ((row1 & 0x7800) >> 7) | ((row2 & 0x7800) >> 11);
        unsigned int states2 = ((row0 & 0x1E00) >> 1) | ((row1 & 0x1E00) >> 5) | ((row2 & 0x1E00) >> 9);
        unsigned int states3 = ((row0 & 0x780) << 1) | ((row1 & 0x780) >> 3) | ((row2 & 0x780) >> 7);
        unsigned char states0_shift = 6 - 2*(states0 & 0x03);
        unsigned char states1_shift = 6 - 2*(states1 & 0x03);
        unsigned char states2_shift = 6 - 2*(states2 & 0x03);
        unsigned char states3_shift = 6 - 2*(states3 & 0x03);
        outboard[pre_x + ncolsInBytes*iy] = (((LUT[states0 >> 2]>>states0_shift)&0x03)<<6) |
                                            (((LUT[states1 >> 2]>>states1_shift)&0x03)<<4) | 
                                            (((LUT[states2 >> 2]>>states2_shift)&0x03)<<2) | 
                                            (((LUT[states3 >> 2]>>states3_shift)&0x03));
        if(iy==1){outboard[pre_x + ncolsInBytes*(nrows+1)]=outboard[pre_x + ncolsInBytes*iy];}
        else if(iy==nrows){outboard[pre_x + ncolsInBytes*0]=outboard[pre_x + ncolsInBytes*iy];}
      }
    }
  }
}
#define NUM_STREAMS 4 
////////// Game of life implementation //////////
char* game_of_life_gpu (char* outboard, char* inboard, const int nrows, const int ncols, const int gens_max){
  debug_print("================== DEBUG MODE ===================\n");
  debug_print("we're in game_of_life_gpu! # iters = %d\n", gens_max);
  double timeStampA = getTimeStamp() ;

  // generate compact look up table
  // LookUpTableToFileCompact();
  // cudaDeviceSynchronize();
  // return outboard;

  int ncolsInBytes = ((ncols+BYTES_WINDOW-1)/BYTES_WINDOW);
  int noRemainBits = ncols%BYTES_WINDOW;
  int size = ncolsInBytes*(nrows+2);
  int bytes = size*sizeof(char);
  int size_out = ncolsInBytes*nrows;
  int bytes_out = size_out*sizeof(char);
  unsigned char *d_bufA, *d_bufB;
  unsigned char *parsed_inboard;
  unsigned char *parsed_outboard;
  cudaMallocHost((void**)&parsed_inboard, bytes);
  cudaMallocHost((void**)&parsed_outboard, bytes_out);
  ByteToBitCell(inboard, parsed_inboard, nrows, ncols, ncolsInBytes);
  cudaMalloc((void **)&d_bufA,bytes);
  cudaMalloc((void **)&d_bufB,bytes);
  //cudaMemcpy( d_bufA, parsed_inboard, bytes, cudaMemcpyHostToDevice);
  // unsigned char* d_lookUpTable;
  // cudaMalloc((void **)&d_lookUpTable,4096*sizeof(unsigned char));
  // InitLookUpTable<<<4, 1024>>>(d_lookUpTable);
  // cudaDeviceSynchronize() ;
  //debug_print("lkt size %d %d\n", 262144*sizeof(unsigned char), sizeof(d_lookUpTable));
  //for (int i = 0; i < 262144; i++){ 
  //  debug_print("index %d\n",i);
  //  for (int ii = 0; ii < 8; ii++) {
  //    debug_print("%d", !!((d_lookUpTable[i] << ii) & 0x80));
  //  }
  //  debug_print("\n");
  //}

  //mem partition for streams
  int batch_row[NUM_STREAMS];
  for (int i = 0; i < NUM_STREAMS-1; i++){
    batch_row[i] = nrows / NUM_STREAMS;
  }
  batch_row[NUM_STREAMS-1] = nrows - (NUM_STREAMS-1) * (int)(nrows/NUM_STREAMS);
  int batch_index[NUM_STREAMS];
  batch_index[0] = 1;
  for (int i = 1; i < NUM_STREAMS; i++){
    batch_index[i] = batch_index[i-1] + batch_row[i-1];
  }

  int mem_row[NUM_STREAMS];
  int mem_row_size[NUM_STREAMS];
  mem_row[0] = 0;
  mem_row_size[0] = 1 + batch_row[0] + 1;
  for (int i = 1; i < NUM_STREAMS; i++){
    mem_row[i] = mem_row[i-1] + mem_row_size[i-1];
    mem_row_size[i] = batch_row[i];
  }
  mem_row_size[NUM_STREAMS-1] = batch_row[NUM_STREAMS-1]-1;
#ifdef DEBUG
  for (int i = 0; i < NUM_STREAMS; i++){
    printf("batch index %d ",batch_index[i]);
    printf("batch size %d ",batch_row[i]);
    printf("batch %d index at %d ",i,mem_row[i]);
    printf("size is %d\n",mem_row_size[i]);
  }
#endif
  dim3 block(32,32);
  dim3 grid(((ncolsInBytes+BYTES_PER_THREAD-1)/BYTES_PER_THREAD+block.x-1)/block.x,(batch_row[0] + block.y-1)/block.y);
  cudaStream_t stream[NUM_STREAMS+1];
  cudaMemcpy( d_bufA, parsed_inboard, bytes, cudaMemcpyHostToDevice);
  cudaDeviceSynchronize() ;
  //for (int i = 1; i < NUM_STREAMS; i++){
  //  debug_print("start stream %d\n",i);
  //  cudaStreamCreate(&(stream[i]));
  //  cudaMemcpyAsync(d_bufA + (batch_index[i-1]-1)*ncolsInBytes,
  //                  parsed_inboard + (batch_row[i-1]-1)*ncolsInBytes,
  //                  (batch_row[i-1]+2)*ncolsInBytes*sizeof(char),
  //                  cudaMemcpyHostToDevice,stream[i]);
  //}
  ////sync all streams and done
  //for(int i = 1; i < NUM_STREAMS; i++){
  //  cudaStreamSynchronize(stream[i]);
  //}
  for (int i = 1; i < NUM_STREAMS + 1; i++){
    //debug_print("start stream %d\n",i);
    cudaStreamCreate(&(stream[i]));
  }
  for (int curgen = 0; curgen < gens_max; curgen++){
    for (int i = 1; i < NUM_STREAMS + 1; i++){
      //cudaStreamCreate(&(stream[i]));
      kernal<<<grid,block,0,stream[i]>>>(d_bufB, d_bufA, batch_index[i-1], batch_row[i-1], nrows, ncolsInBytes, noRemainBits);
    }
  //sync all streams and done
  for(int i = 1; i < NUM_STREAMS + 1; i++){
    cudaStreamSynchronize(stream[i]);
  }
      //SWAP BOARDS
      unsigned char * temp = d_bufA;
      d_bufA = d_bufB;
      d_bufB = temp;
  }
  //for (int i = 1; i < NUM_STREAMS; i++){
  //  cudaMemcpyAsync(parsed_outboard + batch_index[i-1] - 1,
  //                  d_bufA + batch_index[i-1],
  //                  (batch_row[i-1]*ncolsInBytes)*sizeof(char),
  //                  cudaMemcpyDeviceToHost,stream[i]);
  //}
  ////sync all streams and done
  //for(int i = 1; i < NUM_STREAMS; i++){
  //  debug_print("end stream %d\n",i);
  //  cudaStreamSynchronize(stream[i]);
  //}
  cudaMemcpy(parsed_outboard, d_bufA + ncolsInBytes*sizeof(char), bytes_out, cudaMemcpyDeviceToHost);
  BitCellToByte(parsed_outboard, outboard, nrows, ncols, ncolsInBytes);
    
  double timeStampD = getTimeStamp() ;
  double total_time = timeStampD - timeStampA;
  printf("GPU game_of_life: %.6f\n", total_time);
  return outboard;
}
#endif //GPU_IMPL_VERSION == 10
////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// LOOKUP TABLE 2 BIT COMPACT CONST MEM IMPLEMENTATION WITH STREAMS, SHAREMEM ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
#if GPU_IMPL_VERSION == 9
#define BYTES_WINDOW 8
#define BYTES_PER_THREAD 1 //FIXED DO NOT CHANGE
#define LIVECHECK(count, state) ((!state && (count == (char) 3)) ||(state && (count >= 2) && (count <= 3)))
#define COMPUTESTATE(x,y,index) ((index >> ((3 * 4 - 1) - (x+4*y))) & 0x1)

__constant__ __device__ unsigned char lookUpTable [1024] = {
0x0,0x1,0x0,0xb,0x1,0x14,0x1,0x1e,0x1,0x1f,0xb,0xb5,0x15,0x5e,0x1f,0xf4,0x1,0x1e,0xb,0xbe,0x14,0x4a,0x1e,0xea,0x1f,0xfe,0xbf,0xf4,0x5e,0xea,0xfe,0xe0,0x0,0xb,0xa,0xa1,0x1,0x1e,0xb,0xb4,0xb,0xb5,0xa1,0x15,0x1f,0xf4,0xb5,0x54,0xb,0xbe,0xab,0xb4,0x1e,0xea,0xbe,0xe0,0xbf,0xf4,0xb5,0x54,0xfe,0xe0,0xf4,0x40,0x1,0x14,0x1,0x1e,0x14,0x40,0x14,0x4a,0x15,0x5e,0x1f,0xf4,0x54,0x4a,0x5e,0xe0,0x14,0x4a,0x1e,0xea,0x40,0xa,0x4a,0xaa,0x5e,0xea,0xfe,0xe0,0x4a,0xaa,0xea,0xa0,0x1,0x1e,0xb,0xb4,0x14,0x4a,0x1e,0xe0,0x1f,0xf4,0xb5,0x54,0x5e,0xe0,0xf4,0x40,0x1e,0xea,0xbe,0xe0,0x4a,0xaa,0xea,0xa0,0xfe,0xe0,0xf4,0x40,0xea,0xa0,0xe0,0x0,0x1,0x1e,0xb,0xb4,0x14,0x4a,0x1e,0xe0,0x1f,0xf4,0xb5,0x54,0x5e,0xe0,0xf4,0x40,0x1e,0xea,0xbe,0xe0,0x4a,0xaa,0xea,0xa0,0xfe,0xe0,0xf4,0x40,0xea,0xa0,0xe0,0x0,0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0x14,0x4a,0x1e,0xe0,0x40,0xa,0x4a,0xa0,0x5e,0xe0,0xf4,0x40,0x4a,0xa0,0xe0,0x0,0x4a,0xaa,0xea,0xa0,0xa,0xaa,0xaa,0xa0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,
0x1,0x1e,0xb,0xb4,0x14,0x4a,0x1e,0xe0,0x1f,0xf4,0xb5,0x54,0x5e,0xe0,0xf4,0x40,0x1e,0xea,0xbe,0xe0,0x4a,0xaa,0xea,0xa0,0xfe,0xe0,0xf4,0x40,0xea,0xa0,0xe0,0x0,0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0x14,0x4a,0x1e,0xe0,0x40,0xa,0x4a,0xa0,0x5e,0xe0,0xf4,0x40,0x4a,0xa0,0xe0,0x0,0x4a,0xaa,0xea,0xa0,0xa,0xaa,0xaa,0xa0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x4a,0xa0,0xe0,0x0,0xa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0xaa,0xa0,0xa0,0x0,0xaa,0xa0,0xa0,0x0,0xa0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0xb,0xa,0xa1,0x1,0x1e,0xb,0xb4,0xb,0xb5,0xa1,0x15,0x1f,0xf4,0xb5,0x54,0xb,0xbe,0xab,0xb4,0x1e,0xea,0xbe,0xe0,0xbf,0xf4,0xb5,0x54,0xfe,0xe0,0xf4,0x40,0xa,0xa1,0xa0,0x1,0xb,0xb4,0xa1,0x14,0xa1,0x15,0x1,0x15,0xb5,0x54,0x15,0x54,0xab,0xb4,0xa1,0x14,0xbe,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0x1,0x1e,0xb,0xb4,0x14,0x4a,0x1e,0xe0,0x1f,0xf4,0xb5,0x54,0x5e,0xe0,0xf4,0x40,0x1e,0xea,0xbe,0xe0,0x4a,0xaa,0xea,0xa0,0xfe,0xe0,0xf4,0x40,0xea,0xa0,0xe0,0x0,0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xa1,0x14,0x1,0x14,0xb4,0x40,0x14,0x40,0x15,0x54,0x15,0x54,0x54,0x40,0x54,0x40,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,
0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xa1,0x14,0x1,0x14,0xb4,0x40,0x14,0x40,0x15,0x54,0x15,0x54,0x54,0x40,0x54,0x40,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x14,0x40,0x14,0x40,0x40,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
};

unsigned char lookUpTable_CPU [4096] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x3,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x3,0x2,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x3,0x2,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x0,0x1,0x3,0x3,0x3,0x3,0x3,0x2,0x2,0x3,0x3,0x3,0x3,0x3,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x0,0x0,0x2,0x2,0x2,0x2,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x1,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x3,0x2,0x2,0x2,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,
0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x1,0x1,0x1,0x1,0x3,0x2,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x1,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x1,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x0,0x0,0x2,0x2,0x2,0x2,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x1,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x3,0x2,0x2,0x2,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x0,0x1,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x1,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x1,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,
0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
};

void ByteToBitCell(char* in, unsigned char* out, int row, int col, int colInBytes){
  memset(out,0,row*colInBytes*sizeof(char));
  //unsigned char* out_offset = out + col;
  for(int i = 0; i < row; i ++){
    for(int j = 0; j < colInBytes; j++){
      for(int k = 0; k < BYTES_WINDOW; k ++){
        //TODO: care about padding if remaining bits exist
        out[j+(i+1)*colInBytes] |= (in[k + j*BYTES_WINDOW + i*col] << (BYTES_WINDOW-k-1));
      }
    }
  }
  for(int j = 0; j < colInBytes; j++){
    for(int k = 0; k < BYTES_WINDOW; k ++){
      //TODO: care about padding if remaining bits exist
      out[j+0*colInBytes] |= (in[k + j*BYTES_WINDOW +(row-1)*col] << (BYTES_WINDOW-k-1));
      out[j+(row+1)*colInBytes] |= (in[k + j*BYTES_WINDOW + 0*col] << (BYTES_WINDOW-k-1));
    }
  }
#ifdef DEBUG
  for(int i = 0; i < row + 2; i ++){
    for(int j = 0; j < colInBytes; j++){
        //printf("%d ", in[k + j*BYTES_WINDOW + i*col]);
        for (int ii = 0; ii < 8; ii++) {
          printf("%d", !!((out[j+i*colInBytes] << ii) & 0x80));
        }
        printf("\n");
    }
  }
#endif
}
void BitCellToByte(unsigned char* in, char* out, int row, int col, int colInBytes){
  for(int i = 0; i < row; i ++){
    for(int j = 0; j < colInBytes; j++){
      for(int k = 0; k < BYTES_WINDOW; k ++){
        if((k + j*BYTES_WINDOW + i*col) < row*col){
          out[k + j*BYTES_WINDOW + i*col] = (in[j+i*colInBytes] >> (BYTES_WINDOW-k-1)) & 0x01;
        }
      }
    }
  }
}
//helper function to convert loopUpTable to compact 
void LookUpTableToFileCompact() {
  FILE* fptr;
  fptr = fopen("lookUpTable_compact.cuh","w");
  fprintf(fptr,"__constant__ __device__ unsigned char lookUpTable [1024] = {\n");
  unsigned int i = 0;
  for (i = 0; i < 1024; i++){
    unsigned char state = 0x00;
    for(int j = 0; j < 4; j++){
      state |= ((lookUpTable_CPU[i*4 + j] & 0x03) << (6-j*2));
    }
    fprintf(fptr,"0x%x,", state);
    if(i%256==255){
      fprintf(fptr,"\n");
    }
  }
  fprintf(fptr,"};\n");
  fclose(fptr);
}
__device__ void GlobalToShared(unsigned char* sm, unsigned char* inboard, int ix, int iy, int lx, int rx, int col, int smx, int smy){
  sm[smx+(blockDim.x+2)*smy] = inboard[ix+col*iy];
  if(smx==1){
    sm[(blockDim.x+2)*smy] = inboard[lx+col*iy];
  }
  if(smx==blockDim.x){
    sm[smx+1+(blockDim.x+2)*smy] = inboard[rx+col*iy];
  }
  if(smy==1){
    sm[smx] = inboard[ix+col*(iy-1)];
  }
  if(smy==blockDim.y){
    sm[smx+(blockDim.x+2)*(smy+1)] = inboard[ix + col*(iy+1)];
  }
  if(smx==1&&smy==1){
    sm[0] = inboard[lx+col*(iy-1)];
  }
  if(smx==1&&smy==blockDim.y){
    sm[(blockDim.x+2)*(smy+1)] = inboard[lx+col*(iy+1)];
  }
  if(smx==blockDim.x&&smy==1){
    sm[blockDim.x+1] = inboard[rx+col*(iy-1)];
  }
  if(smx==blockDim.x&&smy==blockDim.y){
    sm[blockDim.x+1+(blockDim.x+2)*(blockDim.y+1)] = inboard[rx+col*(iy+1)];
  }
}
__global__ void kernal(unsigned char* outboard, unsigned char* inboard, const int start_index, const int row_size, const int nrows, const int ncolsInBytes, const int noRemainBits){
  extern __shared__ unsigned char sm[];
  int ix = (threadIdx.x + blockIdx.x*blockDim.x)*BYTES_PER_THREAD;
  int iy = threadIdx.y + blockIdx.y*blockDim.y + start_index;
  int smx = threadIdx.x + 1;
  int smy = threadIdx.y + 1;
  int lx = (ix+ncolsInBytes-1)%ncolsInBytes;
  int rx = (ix + 1)%ncolsInBytes;
  GlobalToShared(sm,inboard,ix,iy,lx,rx,ncolsInBytes,smx,smy);
  __syncthreads();
  if(ix<ncolsInBytes && iy<row_size+start_index){
    int uy = iy-1;
    int dy = iy+1;

    int smlx = smx - 1;
    int smrx = smx + 1;
    int smuy = smy - 1;
    int smdy = smy + 1;
    int smcol = blockDim.x + 2;

    uint row0 = (uint) sm[smlx+smcol*smuy] << 16;
    uint row1 = (uint) sm[smlx+smcol*smy ] << 16;
    uint row2 = (uint) sm[smlx+smcol*smdy] << 16;
    row0 |= (uint) sm[smx+smcol*smuy] << 8;
    row1 |= (uint) sm[smx+smcol*smy ] << 8;
    row2 |= (uint) sm[smx+smcol*smdy] << 8;
    uint rrow0 = (uint) sm[smrx+smcol*smuy];
    uint rrow1 = (uint) sm[smrx+smcol*smy ];
    uint rrow2 = (uint) sm[smrx+smcol*smdy];
    int base_x = ix;
    int pre_x;
    for(int i = 0; i < BYTES_PER_THREAD; i++){
      if((base_x + i*BYTES_PER_THREAD) < ncolsInBytes){
        pre_x = ix;
        ix = (ix + 1)%ncolsInBytes;
        row0 |= rrow0;
        row1 |= rrow1;
        row2 |= rrow2;
        if(pre_x == ncolsInBytes-1){
          int mask = ~(0x01<<(noRemainBits + 7));
          row0 &= mask;
          row1 &= mask;
          row2 &= mask;
          row0 |= (rrow0 & 0x80) << noRemainBits;
          row1 |= (rrow1 & 0x80) << noRemainBits;
          row2 |= (rrow2 & 0x80) << noRemainBits;
        }
        unsigned int states0 = ((row0 & 0x1E000) >> 5) | ((row1 & 0x1E000) >> 9) | ((row2 & 0x1E000) >> 13);
        unsigned int states1 = ((row0 & 0x7800) >> 3) | ((row1 & 0x7800) >> 7) | ((row2 & 0x7800) >> 11);
        unsigned int states2 = ((row0 & 0x1E00) >> 1) | ((row1 & 0x1E00) >> 5) | ((row2 & 0x1E00) >> 9);
        unsigned int states3 = ((row0 & 0x780) << 1) | ((row1 & 0x780) >> 3) | ((row2 & 0x780) >> 7);
        unsigned char states0_shift = 6 - 2*(states0 & 0x03);
        unsigned char states1_shift = 6 - 2*(states1 & 0x03);
        unsigned char states2_shift = 6 - 2*(states2 & 0x03);
        unsigned char states3_shift = 6 - 2*(states3 & 0x03);
        outboard[pre_x + ncolsInBytes*iy] = (((lookUpTable[states0 >> 2]>>states0_shift)&0x03)<<6) |
                                            (((lookUpTable[states1 >> 2]>>states1_shift)&0x03)<<4) | 
                                            (((lookUpTable[states2 >> 2]>>states2_shift)&0x03)<<2) | 
                                            (((lookUpTable[states3 >> 2]>>states3_shift)&0x03));
        if(iy==1){outboard[pre_x + ncolsInBytes*(nrows+1)]=outboard[pre_x + ncolsInBytes*iy];}
        else if(iy==nrows){outboard[pre_x + ncolsInBytes*0]=outboard[pre_x + ncolsInBytes*iy];}
      }
    }
  }
}
#define NUM_STREAMS 4 
////////// Game of life implementation //////////
char* game_of_life_gpu (char* outboard, char* inboard, const int nrows, const int ncols, const int gens_max){
  debug_print("================== DEBUG MODE ===================\n");
  debug_print("we're in game_of_life_gpu! # iters = %d\n", gens_max);
  double timeStampA = getTimeStamp() ;

  // generate compact look up table
  // LookUpTableToFileCompact();
  // cudaDeviceSynchronize();
  // return outboard;

  int ncolsInBytes = ((ncols+BYTES_WINDOW-1)/BYTES_WINDOW);
  int noRemainBits = ncols%BYTES_WINDOW;
  int size = ncolsInBytes*(nrows+2);
  int bytes = size*sizeof(char);
  int size_out = ncolsInBytes*nrows;
  int bytes_out = size_out*sizeof(char);
  unsigned char *d_bufA, *d_bufB;
  unsigned char *parsed_inboard;
  unsigned char *parsed_outboard;
  cudaMallocHost((void**)&parsed_inboard, bytes);
  cudaMallocHost((void**)&parsed_outboard, bytes_out);
  ByteToBitCell(inboard, parsed_inboard, nrows, ncols, ncolsInBytes);
  cudaMalloc((void **)&d_bufA,bytes);
  cudaMalloc((void **)&d_bufB,bytes);
  //cudaMemcpy( d_bufA, parsed_inboard, bytes, cudaMemcpyHostToDevice);
  // unsigned char* d_lookUpTable;
  // cudaMalloc((void **)&d_lookUpTable,4096*sizeof(unsigned char));
  // InitLookUpTable<<<4, 1024>>>(d_lookUpTable);
  // cudaDeviceSynchronize() ;
  //debug_print("lkt size %d %d\n", 262144*sizeof(unsigned char), sizeof(d_lookUpTable));
  //for (int i = 0; i < 262144; i++){ 
  //  debug_print("index %d\n",i);
  //  for (int ii = 0; ii < 8; ii++) {
  //    debug_print("%d", !!((d_lookUpTable[i] << ii) & 0x80));
  //  }
  //  debug_print("\n");
  //}

  //mem partition for streams
  int batch_row[NUM_STREAMS];
  for (int i = 0; i < NUM_STREAMS-1; i++){
    batch_row[i] = nrows / NUM_STREAMS;
  }
  batch_row[NUM_STREAMS-1] = nrows - (NUM_STREAMS-1) * (int)(nrows/NUM_STREAMS);
  int batch_index[NUM_STREAMS];
  batch_index[0] = 1;
  for (int i = 1; i < NUM_STREAMS; i++){
    batch_index[i] = batch_index[i-1] + batch_row[i-1];
  }

  int mem_row[NUM_STREAMS];
  int mem_row_size[NUM_STREAMS];
  mem_row[0] = 0;
  mem_row_size[0] = 1 + batch_row[0] + 1;
  for (int i = 1; i < NUM_STREAMS; i++){
    mem_row[i] = mem_row[i-1] + mem_row_size[i-1];
    mem_row_size[i] = batch_row[i];
  }
  mem_row_size[NUM_STREAMS-1] = batch_row[NUM_STREAMS-1]-1;
#ifdef DEBUG
  for (int i = 0; i < NUM_STREAMS; i++){
    printf("batch index %d ",batch_index[i]);
    printf("batch size %d ",batch_row[i]);
    printf("batch %d index at %d ",i,mem_row[i]);
    printf("size is %d\n",mem_row_size[i]);
  }
#endif
  dim3 block(32,32);
  dim3 grid(((ncolsInBytes+BYTES_PER_THREAD-1)/BYTES_PER_THREAD+block.x-1)/block.x,(batch_row[0] + block.y-1)/block.y);
  cudaStream_t stream[NUM_STREAMS+1];
  cudaMemcpy( d_bufA, parsed_inboard, bytes, cudaMemcpyHostToDevice);
  cudaDeviceSynchronize() ;
  //for (int i = 1; i < NUM_STREAMS; i++){
  //  debug_print("start stream %d\n",i);
  //  cudaStreamCreate(&(stream[i]));
  //  cudaMemcpyAsync(d_bufA + (batch_index[i-1]-1)*ncolsInBytes,
  //                  parsed_inboard + (batch_row[i-1]-1)*ncolsInBytes,
  //                  (batch_row[i-1]+2)*ncolsInBytes*sizeof(char),
  //                  cudaMemcpyHostToDevice,stream[i]);
  //}
  ////sync all streams and done
  //for(int i = 1; i < NUM_STREAMS; i++){
  //  cudaStreamSynchronize(stream[i]);
  //}
  for (int i = 1; i < NUM_STREAMS + 1; i++){
    //debug_print("start stream %d\n",i);
    cudaStreamCreate(&(stream[i]));
  }
  for (int curgen = 0; curgen < gens_max; curgen++){
    for (int i = 1; i < NUM_STREAMS + 1; i++){
      //cudaStreamCreate(&(stream[i]));
      kernal<<<grid,block,(34*34)*sizeof(char),stream[i]>>>(d_bufB, d_bufA, batch_index[i-1], batch_row[i-1], nrows, ncolsInBytes, noRemainBits);
    }
  //sync all streams and done
  for(int i = 1; i < NUM_STREAMS + 1; i++){
    cudaStreamSynchronize(stream[i]);
  }
      //SWAP BOARDS
      unsigned char * temp = d_bufA;
      d_bufA = d_bufB;
      d_bufB = temp;
  }
  //for (int i = 1; i < NUM_STREAMS; i++){
  //  cudaMemcpyAsync(parsed_outboard + batch_index[i-1] - 1,
  //                  d_bufA + batch_index[i-1],
  //                  (batch_row[i-1]*ncolsInBytes)*sizeof(char),
  //                  cudaMemcpyDeviceToHost,stream[i]);
  //}
  ////sync all streams and done
  //for(int i = 1; i < NUM_STREAMS; i++){
  //  debug_print("end stream %d\n",i);
  //  cudaStreamSynchronize(stream[i]);
  //}
  cudaMemcpy(parsed_outboard, d_bufA + ncolsInBytes*sizeof(char), bytes_out, cudaMemcpyDeviceToHost);
  BitCellToByte(parsed_outboard, outboard, nrows, ncols, ncolsInBytes);
    
  double timeStampD = getTimeStamp() ;
  double total_time = timeStampD - timeStampA;
  printf("GPU game_of_life: %.6f\n", total_time);
  return outboard;
}
#endif //GPU_IMPL_VERSION == 9
////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// LOOKUP TABLE 2 BIT COMPACT CONST MEM IMPLEMENTATION WITH STREAMING ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
#if GPU_IMPL_VERSION == 8
#define BYTES_WINDOW 8
#define BYTES_PER_THREAD 1 
#define LIVECHECK(count, state) ((!state && (count == (char) 3)) ||(state && (count >= 2) && (count <= 3)))
#define COMPUTESTATE(x,y,index) ((index >> ((3 * 4 - 1) - (x+4*y))) & 0x1)

__constant__ __device__ unsigned char lookUpTable [1024] = {
0x0,0x1,0x0,0xb,0x1,0x14,0x1,0x1e,0x1,0x1f,0xb,0xb5,0x15,0x5e,0x1f,0xf4,0x1,0x1e,0xb,0xbe,0x14,0x4a,0x1e,0xea,0x1f,0xfe,0xbf,0xf4,0x5e,0xea,0xfe,0xe0,0x0,0xb,0xa,0xa1,0x1,0x1e,0xb,0xb4,0xb,0xb5,0xa1,0x15,0x1f,0xf4,0xb5,0x54,0xb,0xbe,0xab,0xb4,0x1e,0xea,0xbe,0xe0,0xbf,0xf4,0xb5,0x54,0xfe,0xe0,0xf4,0x40,0x1,0x14,0x1,0x1e,0x14,0x40,0x14,0x4a,0x15,0x5e,0x1f,0xf4,0x54,0x4a,0x5e,0xe0,0x14,0x4a,0x1e,0xea,0x40,0xa,0x4a,0xaa,0x5e,0xea,0xfe,0xe0,0x4a,0xaa,0xea,0xa0,0x1,0x1e,0xb,0xb4,0x14,0x4a,0x1e,0xe0,0x1f,0xf4,0xb5,0x54,0x5e,0xe0,0xf4,0x40,0x1e,0xea,0xbe,0xe0,0x4a,0xaa,0xea,0xa0,0xfe,0xe0,0xf4,0x40,0xea,0xa0,0xe0,0x0,0x1,0x1e,0xb,0xb4,0x14,0x4a,0x1e,0xe0,0x1f,0xf4,0xb5,0x54,0x5e,0xe0,0xf4,0x40,0x1e,0xea,0xbe,0xe0,0x4a,0xaa,0xea,0xa0,0xfe,0xe0,0xf4,0x40,0xea,0xa0,0xe0,0x0,0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0x14,0x4a,0x1e,0xe0,0x40,0xa,0x4a,0xa0,0x5e,0xe0,0xf4,0x40,0x4a,0xa0,0xe0,0x0,0x4a,0xaa,0xea,0xa0,0xa,0xaa,0xaa,0xa0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,
0x1,0x1e,0xb,0xb4,0x14,0x4a,0x1e,0xe0,0x1f,0xf4,0xb5,0x54,0x5e,0xe0,0xf4,0x40,0x1e,0xea,0xbe,0xe0,0x4a,0xaa,0xea,0xa0,0xfe,0xe0,0xf4,0x40,0xea,0xa0,0xe0,0x0,0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0x14,0x4a,0x1e,0xe0,0x40,0xa,0x4a,0xa0,0x5e,0xe0,0xf4,0x40,0x4a,0xa0,0xe0,0x0,0x4a,0xaa,0xea,0xa0,0xa,0xaa,0xaa,0xa0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x4a,0xa0,0xe0,0x0,0xa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0xaa,0xa0,0xa0,0x0,0xaa,0xa0,0xa0,0x0,0xa0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0xb,0xa,0xa1,0x1,0x1e,0xb,0xb4,0xb,0xb5,0xa1,0x15,0x1f,0xf4,0xb5,0x54,0xb,0xbe,0xab,0xb4,0x1e,0xea,0xbe,0xe0,0xbf,0xf4,0xb5,0x54,0xfe,0xe0,0xf4,0x40,0xa,0xa1,0xa0,0x1,0xb,0xb4,0xa1,0x14,0xa1,0x15,0x1,0x15,0xb5,0x54,0x15,0x54,0xab,0xb4,0xa1,0x14,0xbe,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0x1,0x1e,0xb,0xb4,0x14,0x4a,0x1e,0xe0,0x1f,0xf4,0xb5,0x54,0x5e,0xe0,0xf4,0x40,0x1e,0xea,0xbe,0xe0,0x4a,0xaa,0xea,0xa0,0xfe,0xe0,0xf4,0x40,0xea,0xa0,0xe0,0x0,0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xa1,0x14,0x1,0x14,0xb4,0x40,0x14,0x40,0x15,0x54,0x15,0x54,0x54,0x40,0x54,0x40,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,
0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xa1,0x14,0x1,0x14,0xb4,0x40,0x14,0x40,0x15,0x54,0x15,0x54,0x54,0x40,0x54,0x40,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x14,0x40,0x14,0x40,0x40,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
};

unsigned char lookUpTable_CPU [4096] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x3,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x3,0x2,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x3,0x2,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x0,0x1,0x3,0x3,0x3,0x3,0x3,0x2,0x2,0x3,0x3,0x3,0x3,0x3,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x0,0x0,0x2,0x2,0x2,0x2,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x1,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x3,0x2,0x2,0x2,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,
0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x1,0x1,0x1,0x1,0x3,0x2,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x1,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x1,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x0,0x0,0x2,0x2,0x2,0x2,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x1,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x3,0x2,0x2,0x2,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x0,0x1,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x1,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x1,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,
0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
};

void ByteToBitCell(char* in, unsigned char* out, int row, int col, int colInBytes){
  memset(out,0,row*colInBytes*sizeof(char));
  //unsigned char* out_offset = out + col;
  for(int i = 0; i < row; i ++){
    for(int j = 0; j < colInBytes; j++){
      for(int k = 0; k < BYTES_WINDOW; k ++){
        //TODO: care about padding if remaining bits exist
        out[j+(i+1)*colInBytes] |= (in[k + j*BYTES_WINDOW + i*col] << (BYTES_WINDOW-k-1));
      }
    }
  }
  for(int j = 0; j < colInBytes; j++){
    for(int k = 0; k < BYTES_WINDOW; k ++){
      //TODO: care about padding if remaining bits exist
      out[j+0*colInBytes] |= (in[k + j*BYTES_WINDOW +(row-1)*col] << (BYTES_WINDOW-k-1));
      out[j+(row+1)*colInBytes] |= (in[k + j*BYTES_WINDOW + 0*col] << (BYTES_WINDOW-k-1));
    }
  }
#ifdef DEBUG
  for(int i = 0; i < row + 2; i ++){
    for(int j = 0; j < colInBytes; j++){
        //printf("%d ", in[k + j*BYTES_WINDOW + i*col]);
        for (int ii = 0; ii < 8; ii++) {
          printf("%d", !!((out[j+i*colInBytes] << ii) & 0x80));
        }
        printf("\n");
    }
  }
#endif
}
void BitCellToByte(unsigned char* in, char* out, int row, int col, int colInBytes){
  for(int i = 0; i < row; i ++){
    for(int j = 0; j < colInBytes; j++){
      for(int k = 0; k < BYTES_WINDOW; k ++){
        if((k + j*BYTES_WINDOW + i*col) < row*col){
          out[k + j*BYTES_WINDOW + i*col] = (in[j+i*colInBytes] >> (BYTES_WINDOW-k-1)) & 0x01;
        }
      }
    }
  }
}
//helper function to convert loopUpTable to compact 
void LookUpTableToFileCompact() {
  FILE* fptr;
  fptr = fopen("lookUpTable_compact.cuh","w");
  fprintf(fptr,"__constant__ __device__ unsigned char lookUpTable [1024] = {\n");
  unsigned int i = 0;
  for (i = 0; i < 1024; i++){
    unsigned char state = 0x00;
    for(int j = 0; j < 4; j++){
      state |= ((lookUpTable_CPU[i*4 + j] & 0x03) << (6-j*2));
    }
    fprintf(fptr,"0x%x,", state);
    if(i%256==255){
      fprintf(fptr,"\n");
    }
  }
  fprintf(fptr,"};\n");
  fclose(fptr);
}
__global__ void kernal(unsigned char* outboard, unsigned char* inboard, const int start_index, const int row_size, const int nrows, const int ncolsInBytes, const int noRemainBits){
  int ix = (threadIdx.x + blockIdx.x*blockDim.x)*BYTES_PER_THREAD;
  int iy = threadIdx.y + blockIdx.y*blockDim.y + start_index;
  if(ix<ncolsInBytes && iy<row_size+start_index){
    int lx = (ix+ncolsInBytes-1)%ncolsInBytes;
    int uy = iy-1;
    int dy = iy+1;
    uint row0 = (uint) inboard[lx+ncolsInBytes*uy] << 16;
    uint row1 = (uint) inboard[lx+ncolsInBytes*iy] << 16;
    uint row2 = (uint) inboard[lx+ncolsInBytes*dy] << 16;
    row0 |= (uint) inboard[ix+ncolsInBytes*uy] << 8;
    row1 |= (uint) inboard[ix+ncolsInBytes*iy] << 8;
    row2 |= (uint) inboard[ix+ncolsInBytes*dy] << 8;
    int base_x = ix;
    int pre_x;
    for(int i = 0; i < BYTES_PER_THREAD; i++){
      if((base_x + i*BYTES_PER_THREAD) < ncolsInBytes){
        pre_x = ix;
        ix = (ix + 1)%ncolsInBytes;
        row0 |= (uint) inboard[ix+ncolsInBytes*uy];
        row1 |= (uint) inboard[ix+ncolsInBytes*iy];
        row2 |= (uint) inboard[ix+ncolsInBytes*dy];
        if(pre_x == ncolsInBytes-1){
          int mask = ~(0x01<<(noRemainBits + 7));
          row0 &= mask;
          row1 &= mask;
          row2 &= mask;
          row0 |= ((uint) inboard[ix+ncolsInBytes*uy] & 0x80) << noRemainBits;
          row1 |= ((uint) inboard[ix+ncolsInBytes*iy] & 0x80) << noRemainBits;
          row2 |= ((uint) inboard[ix+ncolsInBytes*dy] & 0x80) << noRemainBits;
        }
        unsigned int states0 = ((row0 & 0x1E000) >> 5) | ((row1 & 0x1E000) >> 9) | ((row2 & 0x1E000) >> 13);
        unsigned int states1 = ((row0 & 0x7800) >> 3) | ((row1 & 0x7800) >> 7) | ((row2 & 0x7800) >> 11);
        unsigned int states2 = ((row0 & 0x1E00) >> 1) | ((row1 & 0x1E00) >> 5) | ((row2 & 0x1E00) >> 9);
        unsigned int states3 = ((row0 & 0x780) << 1) | ((row1 & 0x780) >> 3) | ((row2 & 0x780) >> 7);
        unsigned char states0_shift = 6 - 2*(states0 & 0x03);
        unsigned char states1_shift = 6 - 2*(states1 & 0x03);
        unsigned char states2_shift = 6 - 2*(states2 & 0x03);
        unsigned char states3_shift = 6 - 2*(states3 & 0x03);
        outboard[pre_x + ncolsInBytes*iy] = (((lookUpTable[states0 >> 2]>>states0_shift)&0x03)<<6) |
                                            (((lookUpTable[states1 >> 2]>>states1_shift)&0x03)<<4) | 
                                            (((lookUpTable[states2 >> 2]>>states2_shift)&0x03)<<2) | 
                                            (((lookUpTable[states3 >> 2]>>states3_shift)&0x03));
        if(iy==1){outboard[pre_x + ncolsInBytes*(nrows+1)]=outboard[pre_x + ncolsInBytes*iy];}
        else if(iy==nrows){outboard[pre_x + ncolsInBytes*0]=outboard[pre_x + ncolsInBytes*iy];}
      }
    }
  }
}
#define NUM_STREAMS 4 
////////// Game of life implementation //////////
char* game_of_life_gpu (char* outboard, char* inboard, const int nrows, const int ncols, const int gens_max){
  debug_print("================== DEBUG MODE ===================\n");
  debug_print("we're in game_of_life_gpu! # iters = %d\n", gens_max);
  double timeStampA = getTimeStamp() ;

  // generate compact look up table
  // LookUpTableToFileCompact();
  // cudaDeviceSynchronize();
  // return outboard;

  int ncolsInBytes = ((ncols+BYTES_WINDOW-1)/BYTES_WINDOW);
  int noRemainBits = ncols%BYTES_WINDOW;
  int size = ncolsInBytes*(nrows+2);
  int bytes = size*sizeof(char);
  int size_out = ncolsInBytes*nrows;
  int bytes_out = size_out*sizeof(char);
  unsigned char *d_bufA, *d_bufB;
  unsigned char *parsed_inboard;
  unsigned char *parsed_outboard;
  cudaMallocHost((void**)&parsed_inboard, bytes);
  cudaMallocHost((void**)&parsed_outboard, bytes_out);
  ByteToBitCell(inboard, parsed_inboard, nrows, ncols, ncolsInBytes);
  cudaMalloc((void **)&d_bufA,bytes);
  cudaMalloc((void **)&d_bufB,bytes);
  //cudaMemcpy( d_bufA, parsed_inboard, bytes, cudaMemcpyHostToDevice);
  // unsigned char* d_lookUpTable;
  // cudaMalloc((void **)&d_lookUpTable,4096*sizeof(unsigned char));
  // InitLookUpTable<<<4, 1024>>>(d_lookUpTable);
  // cudaDeviceSynchronize() ;
  //debug_print("lkt size %d %d\n", 262144*sizeof(unsigned char), sizeof(d_lookUpTable));
  //for (int i = 0; i < 262144; i++){ 
  //  debug_print("index %d\n",i);
  //  for (int ii = 0; ii < 8; ii++) {
  //    debug_print("%d", !!((d_lookUpTable[i] << ii) & 0x80));
  //  }
  //  debug_print("\n");
  //}

  //mem partition for streams
  int batch_row[NUM_STREAMS];
  for (int i = 0; i < NUM_STREAMS-1; i++){
    batch_row[i] = nrows / NUM_STREAMS;
  }
  batch_row[NUM_STREAMS-1] = nrows - (NUM_STREAMS-1) * (int)(nrows/NUM_STREAMS);
  int batch_index[NUM_STREAMS];
  batch_index[0] = 1;
  for (int i = 1; i < NUM_STREAMS; i++){
    batch_index[i] = batch_index[i-1] + batch_row[i-1];
  }

  int mem_row[NUM_STREAMS];
  int mem_row_size[NUM_STREAMS];
  mem_row[0] = 0;
  mem_row_size[0] = 1 + batch_row[0] + 1;
  for (int i = 1; i < NUM_STREAMS; i++){
    mem_row[i] = mem_row[i-1] + mem_row_size[i-1];
    mem_row_size[i] = batch_row[i];
  }
  mem_row_size[NUM_STREAMS-1] = batch_row[NUM_STREAMS-1]-1;
#ifdef DEBUG
  for (int i = 0; i < NUM_STREAMS; i++){
    printf("batch index %d ",batch_index[i]);
    printf("batch size %d ",batch_row[i]);
    printf("batch %d index at %d ",i,mem_row[i]);
    printf("size is %d\n",mem_row_size[i]);
  }
#endif
  dim3 block(32,32);
  dim3 grid(((ncolsInBytes+BYTES_PER_THREAD-1)/BYTES_PER_THREAD+block.x-1)/block.x,(batch_row[0] + block.y-1)/block.y);
  cudaStream_t stream[NUM_STREAMS+1];
  cudaMemcpy( d_bufA, parsed_inboard, bytes, cudaMemcpyHostToDevice);
  cudaDeviceSynchronize() ;
  //for (int i = 1; i < NUM_STREAMS; i++){
  //  debug_print("start stream %d\n",i);
  //  cudaStreamCreate(&(stream[i]));
  //  cudaMemcpyAsync(d_bufA + (batch_index[i-1]-1)*ncolsInBytes,
  //                  parsed_inboard + (batch_row[i-1]-1)*ncolsInBytes,
  //                  (batch_row[i-1]+2)*ncolsInBytes*sizeof(char),
  //                  cudaMemcpyHostToDevice,stream[i]);
  //}
  ////sync all streams and done
  //for(int i = 1; i < NUM_STREAMS; i++){
  //  cudaStreamSynchronize(stream[i]);
  //}
  for (int i = 1; i < NUM_STREAMS + 1; i++){
    //debug_print("start stream %d\n",i);
    cudaStreamCreate(&(stream[i]));
  }
  for (int curgen = 0; curgen < gens_max; curgen++){
    for (int i = 1; i < NUM_STREAMS + 1; i++){
      //cudaStreamCreate(&(stream[i]));
      kernal<<<grid,block,0,stream[i]>>>(d_bufB, d_bufA, batch_index[i-1], batch_row[i-1], nrows, ncolsInBytes, noRemainBits);
    }
  //sync all streams and done
  for(int i = 1; i < NUM_STREAMS + 1; i++){
    cudaStreamSynchronize(stream[i]);
  }
      //SWAP BOARDS
      unsigned char * temp = d_bufA;
      d_bufA = d_bufB;
      d_bufB = temp;
  }
  //for (int i = 1; i < NUM_STREAMS; i++){
  //  cudaMemcpyAsync(parsed_outboard + batch_index[i-1] - 1,
  //                  d_bufA + batch_index[i-1],
  //                  (batch_row[i-1]*ncolsInBytes)*sizeof(char),
  //                  cudaMemcpyDeviceToHost,stream[i]);
  //}
  ////sync all streams and done
  //for(int i = 1; i < NUM_STREAMS; i++){
  //  debug_print("end stream %d\n",i);
  //  cudaStreamSynchronize(stream[i]);
  //}
  cudaMemcpy(parsed_outboard, d_bufA + ncolsInBytes*sizeof(char), bytes_out, cudaMemcpyDeviceToHost);
  BitCellToByte(parsed_outboard, outboard, nrows, ncols, ncolsInBytes);
    
  double timeStampD = getTimeStamp() ;
  double total_time = timeStampD - timeStampA;
  printf("GPU game_of_life: %.6f\n", total_time);
  return outboard;
}
#endif //GPU_IMPL_VERSION == 8
////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// LOOKUP TABLE 1 BIT COMPACT CONST MEM IMPLEMENTATION, NO OPTIMIZATION ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
#if GPU_IMPL_VERSION == 7
#define BYTES_WINDOW 8
#define BYTES_PER_THREAD 1
#define LIVECHECK(count, state) ((!state && (count == (char) 3)) ||(state && (count >= 2) && (count <= 3)))
#define COMPUTESTATE(x,y,index) ((index >> ((3 * 4 - 1) - (x+4*y))) & 0x1)

__constant__ __device__ unsigned char lookUpTable [64] = {
0x1,0x16,0x17,0x7e,0x16,0x68,0x7e,0xe8,0x16,0x68,0x7e,0xe8,0x68,0x80,0xe8,0x80,0x16,0x68,0x7e,0xe8,0x68,0x80,0xe8,0x80,0x68,0x80,0xe8,0x80,0x80,0x0,0x80,0x0,0x16,0x68,0x7e,0xe8,0x68,0x80,0xe8,0x80,0x68,0x80,0xe8,0x80,0x80,0x0,0x80,0x0,0x68,0x80,0xe8,0x80,0x80,0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x0,0x0,0x0,0x0,};

unsigned char lookUpTable_CPU [512] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
};

void ByteToBitCell(char* in, unsigned char* out, int row, int col, int colInBytes){
  memset(out,0,row*colInBytes*sizeof(char));
  for(int i = 0; i < row; i ++){
    for(int j = 0; j < colInBytes; j++){
      for(int k = 0; k < BYTES_WINDOW; k ++){
        //TODO: care about padding if remaining bits exist
        out[j+i*colInBytes] |= (in[k + j*BYTES_WINDOW + i*col] << (BYTES_WINDOW-k-1));
      }
    }
  }
}
void BitCellToByte(unsigned char* in, char* out, int row, int col, int colInBytes){
  for(int i = 0; i < row; i ++){
    for(int j = 0; j < colInBytes; j++){
      for(int k = 0; k < BYTES_WINDOW; k ++){
        if((k + j*BYTES_WINDOW + i*col) < row*col){
          out[k + j*BYTES_WINDOW + i*col] = (in[j+i*colInBytes] >> (BYTES_WINDOW-k-1)) & 0x01;
        }
      }
    }
  }
}
//helper function to convert loopUpTable to compact 
void LookUpTableToFileCompact() {
  FILE* fptr;
  fptr = fopen("lookUpTable_compact.txt","w");
  fprintf(fptr,"__constant__ __device__ unsigned char lookUpTable [64] = {\n");
  unsigned int i = 0;
  for (i = 0; i < 64; i++){
    unsigned char state = 0x00;
    for(int j = 0; j < 8; j++){
      state |= ((lookUpTable_CPU[i*8 + j] & 0x01) << (7-j));
    }
    fprintf(fptr,"0x%x,", state);
    if(i%128==127){
      fprintf(fptr,"\n");
    }
  }
  fprintf(fptr,"};\n");
  fclose(fptr);
}
//helper function to build loopUpTable header file
void LookUpTableToFile() {
  FILE* fptr;
  fptr = fopen("lookUpTable.txt","w");
  fprintf(fptr,"__constant__ __device__ unsigned char lookUpTable [512] = {\n");
  unsigned int tableIndex = 0;
  for (tableIndex = 0; tableIndex < 512; tableIndex++){
    unsigned char state = 0x00;
    unsigned int neighbors = tableIndex & 0x01EF;
    char centerState = (tableIndex & 0x010) >> 4;
    char count = 0;
    while(neighbors){
      count += (neighbors & 0x01);
      neighbors >>= 1;
    }
    state = (LIVECHECK(count,centerState));
    fprintf(fptr,"0x%x,", state);
    if(tableIndex%256==255){
      fprintf(fptr,"\n");
    }
  }
  fprintf(fptr,"};\n");
  fclose(fptr);
}

__global__ void kernal(unsigned char* outboard, unsigned char* inboard, const int nrows, const int ncolsInBytes, const int noRemainBits){
  int ix = (threadIdx.x + blockIdx.x*blockDim.x)*BYTES_PER_THREAD;
  int iy = threadIdx.y + blockIdx.y*blockDim.y;
  if(ix<ncolsInBytes && iy<nrows){
    int lx = (ix+ncolsInBytes-1)%ncolsInBytes;
    int uy = (iy+nrows-1)%nrows;
    int dy = (iy+1)%nrows;
    uint row0 = (uint) inboard[lx+ncolsInBytes*uy] << 16;
    uint row1 = (uint) inboard[lx+ncolsInBytes*iy] << 16;
    uint row2 = (uint) inboard[lx+ncolsInBytes*dy] << 16;
    row0 |= (uint) inboard[ix+ncolsInBytes*uy] << 8;
    row1 |= (uint) inboard[ix+ncolsInBytes*iy] << 8;
    row2 |= (uint) inboard[ix+ncolsInBytes*dy] << 8;
    int base_x = ix;
    int pre_x;
    for(int i = 0; i < BYTES_PER_THREAD; i++){
      if((base_x + i*BYTES_PER_THREAD) < ncolsInBytes){
        pre_x = ix;
        ix = (ix + 1)%ncolsInBytes;
        row0 |= (uint) inboard[ix+ncolsInBytes*uy];
        row1 |= (uint) inboard[ix+ncolsInBytes*iy];
        row2 |= (uint) inboard[ix+ncolsInBytes*dy];
        if(pre_x == ncolsInBytes-1){
          int mask = ~(0x01<<(noRemainBits + 7));
          row0 &= mask;
          row1 &= mask;
          row2 &= mask;
          row0 |= ((uint) inboard[ix+ncolsInBytes*uy] & 0x80) << noRemainBits;
          row1 |= ((uint) inboard[ix+ncolsInBytes*iy] & 0x80) << noRemainBits;
          row2 |= ((uint) inboard[ix+ncolsInBytes*dy] & 0x80) << noRemainBits;
        }
        unsigned int states0 = ((row0 & 0x1C000) >> 8) | ((row1 & 0x1C000) >> 11) | ((row2 & 0x1C000) >> 14);
        unsigned int states1 = ((row0 & 0xE000) >> 7) | ((row1 & 0xE000) >> 10) | ((row2 & 0xE000) >> 13);
        unsigned int states2 = ((row0 & 0x7000) >> 6) | ((row1 & 0x7000) >> 9) | ((row2 & 0x7000) >> 12);
        unsigned int states3 = ((row0 & 0x3800) >> 5) | ((row1 & 0x3800) >> 8) | ((row2 & 0x3800) >> 11);
        unsigned int states4 = ((row0 & 0x1C00) >> 4) | ((row1 & 0x1C00) >> 7) | ((row2 & 0x1C00) >> 10);
        unsigned int states5 = ((row0 & 0xE00) >> 3) | ((row1 & 0xE00) >> 6) | ((row2 & 0xE00) >> 9);
        unsigned int states6 = ((row0 & 0x700) >> 2) | ((row1 & 0x700) >> 5) | ((row2 & 0x700) >> 8);
        unsigned int states7 = ((row0 & 0x380) >> 1) | ((row1 & 0x380) >> 4) | ((row2 & 0x380) >> 7);
        unsigned int states0_shift = (7 - (states0 & 0x07));
        unsigned int states1_shift = (7 - (states1 & 0x07));
        unsigned int states2_shift = (7 - (states2 & 0x07));
        unsigned int states3_shift = (7 - (states3 & 0x07));
        unsigned int states4_shift = (7 - (states4 & 0x07));
        unsigned int states5_shift = (7 - (states5 & 0x07));
        unsigned int states6_shift = (7 - (states6 & 0x07));
        unsigned int states7_shift = (7 - (states7 & 0x07));
        outboard[pre_x + ncolsInBytes*iy] = (((lookUpTable[states0>>3]>>states0_shift)&0x01)<<7) |
                                            (((lookUpTable[states1>>3]>>states1_shift)&0x01)<<6) | 
                                            (((lookUpTable[states2>>3]>>states2_shift)&0x01)<<5) | 
                                            (((lookUpTable[states3>>3]>>states3_shift)&0x01)<<4) | 
                                            (((lookUpTable[states4>>3]>>states4_shift)&0x01)<<3) | 
                                            (((lookUpTable[states5>>3]>>states5_shift)&0x01)<<2) | 
                                            (((lookUpTable[states6>>3]>>states6_shift)&0x01)<<1) | 
                                            (((lookUpTable[states7>>3]>>states7_shift)&0x01));
      }
    }
  }
}

////////// Game of life implementation //////////
char* game_of_life_gpu (char* outboard, char* inboard, const int nrows, const int ncols, const int gens_max){
  debug_print("================== DEBUG MODE ===================\n");
  debug_print("we're in game_of_life_gpu! # iters = %d\n", gens_max);
  double timeStampA = getTimeStamp() ;

  int ncolsInBytes = ((ncols+BYTES_WINDOW-1)/BYTES_WINDOW);
  int noRemainBits = ncols%BYTES_WINDOW;
  int size = ncolsInBytes*nrows;
  int bytes = size*sizeof(char);
  unsigned char *d_bufA, *d_bufB;
  unsigned char parsed_inboard[size];
  unsigned char parsed_outboard[size];
  ByteToBitCell(inboard, parsed_inboard, nrows, ncols, ncolsInBytes);
  cudaMalloc((void **)&d_bufA,bytes);
  cudaMalloc((void **)&d_bufB,bytes);
  cudaMemcpy( d_bufA, parsed_inboard, bytes, cudaMemcpyHostToDevice);
  //TODO: Hardcode lookupTable in const memory
  // unsigned char* d_lookUpTable;
  // cudaMalloc((void **)&d_lookUpTable,4096*sizeof(unsigned char));
  // InitLookUpTable<<<4, 1024>>>(d_lookUpTable);
  // cudaDeviceSynchronize() ;
  //debug_print("lkt size %d %d\n", 262144*sizeof(unsigned char), sizeof(d_lookUpTable));
  //for (int i = 0; i < 262144; i++){ 
  //  debug_print("index %d\n",i);
  //  for (int ii = 0; ii < 8; ii++) {
  //    debug_print("%d", !!((d_lookUpTable[i] << ii) & 0x80));
  //  }
  //  debug_print("\n");
  //}
  dim3 block(32,32);
  dim3 grid(((ncolsInBytes+BYTES_PER_THREAD-1)/BYTES_PER_THREAD+block.x-1)/block.x,(nrows + block.y-1)/block.y);
  for (int curgen = 0; curgen < gens_max; curgen++){
    kernal<<<grid,block>>>(d_bufB, d_bufA, nrows, ncolsInBytes, noRemainBits);
    cudaDeviceSynchronize() ;
    //SWAP BOARDS
    unsigned char * temp = d_bufA;
    d_bufA = d_bufB;
    d_bufB = temp;
  }
  cudaMemcpy(parsed_outboard, d_bufA, bytes, cudaMemcpyDeviceToHost);
  BitCellToByte(parsed_outboard, outboard, nrows, ncols, ncolsInBytes);
    
  double timeStampD = getTimeStamp() ;
  double total_time = timeStampD - timeStampA;
  printf("GPU game_of_life: %.6f\n", total_time);
  return outboard;
}
#endif //GPU_IMPL_VERSION == 7



////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// LOOKUP TABLE 1 BIT CONST MEM IMPLEMENTATION, NO OPTIMIZATION ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
#if GPU_IMPL_VERSION == 6
#define BYTES_WINDOW 8
#define BYTES_PER_THREAD 1
#define LIVECHECK(count, state) ((!state && (count == (char) 3)) ||(state && (count >= 2) && (count <= 3)))
#define COMPUTESTATE(x,y,index) ((index >> ((3 * 4 - 1) - (x+4*y))) & 0x1)

__constant__ __device__ unsigned char lookUpTable [512] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
};

void ByteToBitCell(char* in, unsigned char* out, int row, int col, int colInBytes){
  memset(out,0,row*colInBytes*sizeof(char));
  for(int i = 0; i < row; i ++){
    for(int j = 0; j < colInBytes; j++){
      for(int k = 0; k < BYTES_WINDOW; k ++){
        //TODO: care about padding if remaining bits exist
        out[j+i*colInBytes] |= (in[k + j*BYTES_WINDOW + i*col] << (BYTES_WINDOW-k-1));
      }
    }
  }
}
void BitCellToByte(unsigned char* in, char* out, int row, int col, int colInBytes){
  for(int i = 0; i < row; i ++){
    for(int j = 0; j < colInBytes; j++){
      for(int k = 0; k < BYTES_WINDOW; k ++){
        if((k + j*BYTES_WINDOW + i*col) < row*col){
          out[k + j*BYTES_WINDOW + i*col] = (in[j+i*colInBytes] >> (BYTES_WINDOW-k-1)) & 0x01;
        }
      }
    }
  }
}
//helper function to build loopUpTable header file
void LookUpTableToFile() {
  FILE* fptr;
  fptr = fopen("lookUpTable.txt","w");
  fprintf(fptr,"__constant__ __device__ unsigned char lookUpTable [512] = {\n");
  unsigned int tableIndex = 0;
  for (tableIndex = 0; tableIndex < 512; tableIndex++){
    unsigned char state = 0x00;
    unsigned int neighbors = tableIndex & 0x01EF;
    char centerState = (tableIndex & 0x010) >> 4;
    char count = 0;
    while(neighbors){
      count += (neighbors & 0x01);
      neighbors >>= 1;
    }
    state = (LIVECHECK(count,centerState));
    fprintf(fptr,"0x%x,", state);
    if(tableIndex%256==255){
      fprintf(fptr,"\n");
    }
  }
  fprintf(fptr,"};\n");
  fclose(fptr);
}

__global__ void kernal(unsigned char* outboard, unsigned char* inboard, const int nrows, const int ncolsInBytes, const int noRemainBits){
  int ix = (threadIdx.x + blockIdx.x*blockDim.x)*BYTES_PER_THREAD;
  int iy = threadIdx.y + blockIdx.y*blockDim.y;
  if(ix<ncolsInBytes && iy<nrows){
    int lx = (ix+ncolsInBytes-1)%ncolsInBytes;
    int uy = (iy+nrows-1)%nrows;
    int dy = (iy+1)%nrows;
    uint row0 = (uint) inboard[lx+ncolsInBytes*uy] << 16;
    uint row1 = (uint) inboard[lx+ncolsInBytes*iy] << 16;
    uint row2 = (uint) inboard[lx+ncolsInBytes*dy] << 16;
    row0 |= (uint) inboard[ix+ncolsInBytes*uy] << 8;
    row1 |= (uint) inboard[ix+ncolsInBytes*iy] << 8;
    row2 |= (uint) inboard[ix+ncolsInBytes*dy] << 8;
    int base_x = ix;
    int pre_x;
    for(int i = 0; i < BYTES_PER_THREAD; i++){
      if((base_x + i*BYTES_PER_THREAD) < ncolsInBytes){
        pre_x = ix;
        ix = (ix + 1)%ncolsInBytes;
        row0 |= (uint) inboard[ix+ncolsInBytes*uy];
        row1 |= (uint) inboard[ix+ncolsInBytes*iy];
        row2 |= (uint) inboard[ix+ncolsInBytes*dy];
        if(pre_x == ncolsInBytes-1){
          int mask = ~(0x01<<(noRemainBits + 7));
          row0 &= mask;
          row1 &= mask;
          row2 &= mask;
          row0 |= ((uint) inboard[ix+ncolsInBytes*uy] & 0x80) << noRemainBits;
          row1 |= ((uint) inboard[ix+ncolsInBytes*iy] & 0x80) << noRemainBits;
          row2 |= ((uint) inboard[ix+ncolsInBytes*dy] & 0x80) << noRemainBits;
        }
        unsigned int states0 = ((row0 & 0x1C000) >> 8) | ((row1 & 0x1C000) >> 11) | ((row2 & 0x1C000) >> 14);
        unsigned int states1 = ((row0 & 0xE000) >> 7) | ((row1 & 0xE000) >> 10) | ((row2 & 0xE000) >> 13);
        unsigned int states2 = ((row0 & 0x7000) >> 6) | ((row1 & 0x7000) >> 9) | ((row2 & 0x7000) >> 12);
        unsigned int states3 = ((row0 & 0x3800) >> 5) | ((row1 & 0x3800) >> 8) | ((row2 & 0x3800) >> 11);
        unsigned int states4 = ((row0 & 0x1C00) >> 4) | ((row1 & 0x1C00) >> 7) | ((row2 & 0x1C00) >> 10);
        unsigned int states5 = ((row0 & 0xE00) >> 3) | ((row1 & 0xE00) >> 6) | ((row2 & 0xE00) >> 9);
        unsigned int states6 = ((row0 & 0x700) >> 2) | ((row1 & 0x700) >> 5) | ((row2 & 0x700) >> 8);
        unsigned int states7 = ((row0 & 0x380) >> 1) | ((row1 & 0x380) >> 4) | ((row2 & 0x380) >> 7);
        outboard[pre_x + ncolsInBytes*iy] = (lookUpTable[states0]<<7) |
                                            (lookUpTable[states1]<<6) | 
                                            (lookUpTable[states2]<<5) | 
                                            (lookUpTable[states3]<<4) | 
                                            (lookUpTable[states4]<<3) | 
                                            (lookUpTable[states5]<<2) | 
                                            (lookUpTable[states6]<<1) | 
                                            lookUpTable[states7];
      }
    }
  }
}

////////// Game of life implementation //////////
char* game_of_life_gpu (char* outboard, char* inboard, const int nrows, const int ncols, const int gens_max){
  debug_print("================== DEBUG MODE ===================\n");
  debug_print("we're in game_of_life_gpu! # iters = %d\n", gens_max);
  double timeStampA = getTimeStamp() ;

  int ncolsInBytes = ((ncols+BYTES_WINDOW-1)/BYTES_WINDOW);
  int noRemainBits = ncols%BYTES_WINDOW;
  int size = ncolsInBytes*nrows;
  int bytes = size*sizeof(char);
  unsigned char *d_bufA, *d_bufB;
  unsigned char parsed_inboard[size];
  unsigned char parsed_outboard[size];
  ByteToBitCell(inboard, parsed_inboard, nrows, ncols, ncolsInBytes);
  cudaMalloc((void **)&d_bufA,bytes);
  cudaMalloc((void **)&d_bufB,bytes);
  cudaMemcpy( d_bufA, parsed_inboard, bytes, cudaMemcpyHostToDevice);
  //TODO: Hardcode lookupTable in const memory
  // unsigned char* d_lookUpTable;
  // cudaMalloc((void **)&d_lookUpTable,4096*sizeof(unsigned char));
  // InitLookUpTable<<<4, 1024>>>(d_lookUpTable);
  // cudaDeviceSynchronize() ;
  //debug_print("lkt size %d %d\n", 262144*sizeof(unsigned char), sizeof(d_lookUpTable));
  //for (int i = 0; i < 262144; i++){ 
  //  debug_print("index %d\n",i);
  //  for (int ii = 0; ii < 8; ii++) {
  //    debug_print("%d", !!((d_lookUpTable[i] << ii) & 0x80));
  //  }
  //  debug_print("\n");
  //}
  dim3 block(32,32);
  dim3 grid(((ncolsInBytes+BYTES_PER_THREAD-1)/BYTES_PER_THREAD+block.x-1)/block.x,(nrows + block.y-1)/block.y);
  for (int curgen = 0; curgen < gens_max; curgen++){
    kernal<<<grid,block>>>(d_bufB, d_bufA, nrows, ncolsInBytes, noRemainBits);
    cudaDeviceSynchronize() ;
    //SWAP BOARDS
    unsigned char * temp = d_bufA;
    d_bufA = d_bufB;
    d_bufB = temp;
  }
  cudaMemcpy(parsed_outboard, d_bufA, bytes, cudaMemcpyDeviceToHost);
  BitCellToByte(parsed_outboard, outboard, nrows, ncols, ncolsInBytes);
    
  double timeStampD = getTimeStamp() ;
  double total_time = timeStampD - timeStampA;
  printf("GPU game_of_life: %.6f\n", total_time);
  return outboard;
}
#endif //GPU_IMPL_VERSION == 6

////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// LOOKUP TABLE 2 BIT COMPACT CONST MEM IMPLEMENTATION, NO OPTIMIZATION ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
#if GPU_IMPL_VERSION == 5
#define BYTES_WINDOW 8
#define BYTES_PER_THREAD 1
#define LIVECHECK(count, state) ((!state && (count == (char) 3)) ||(state && (count >= 2) && (count <= 3)))
#define COMPUTESTATE(x,y,index) ((index >> ((3 * 4 - 1) - (x+4*y))) & 0x1)

__constant__ __device__ unsigned char lookUpTable [1024] = {
0x0,0x1,0x0,0xb,0x1,0x14,0x1,0x1e,0x1,0x1f,0xb,0xb5,0x15,0x5e,0x1f,0xf4,0x1,0x1e,0xb,0xbe,0x14,0x4a,0x1e,0xea,0x1f,0xfe,0xbf,0xf4,0x5e,0xea,0xfe,0xe0,0x0,0xb,0xa,0xa1,0x1,0x1e,0xb,0xb4,0xb,0xb5,0xa1,0x15,0x1f,0xf4,0xb5,0x54,0xb,0xbe,0xab,0xb4,0x1e,0xea,0xbe,0xe0,0xbf,0xf4,0xb5,0x54,0xfe,0xe0,0xf4,0x40,0x1,0x14,0x1,0x1e,0x14,0x40,0x14,0x4a,0x15,0x5e,0x1f,0xf4,0x54,0x4a,0x5e,0xe0,0x14,0x4a,0x1e,0xea,0x40,0xa,0x4a,0xaa,0x5e,0xea,0xfe,0xe0,0x4a,0xaa,0xea,0xa0,0x1,0x1e,0xb,0xb4,0x14,0x4a,0x1e,0xe0,0x1f,0xf4,0xb5,0x54,0x5e,0xe0,0xf4,0x40,0x1e,0xea,0xbe,0xe0,0x4a,0xaa,0xea,0xa0,0xfe,0xe0,0xf4,0x40,0xea,0xa0,0xe0,0x0,0x1,0x1e,0xb,0xb4,0x14,0x4a,0x1e,0xe0,0x1f,0xf4,0xb5,0x54,0x5e,0xe0,0xf4,0x40,0x1e,0xea,0xbe,0xe0,0x4a,0xaa,0xea,0xa0,0xfe,0xe0,0xf4,0x40,0xea,0xa0,0xe0,0x0,0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0x14,0x4a,0x1e,0xe0,0x40,0xa,0x4a,0xa0,0x5e,0xe0,0xf4,0x40,0x4a,0xa0,0xe0,0x0,0x4a,0xaa,0xea,0xa0,0xa,0xaa,0xaa,0xa0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,
0x1,0x1e,0xb,0xb4,0x14,0x4a,0x1e,0xe0,0x1f,0xf4,0xb5,0x54,0x5e,0xe0,0xf4,0x40,0x1e,0xea,0xbe,0xe0,0x4a,0xaa,0xea,0xa0,0xfe,0xe0,0xf4,0x40,0xea,0xa0,0xe0,0x0,0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0x14,0x4a,0x1e,0xe0,0x40,0xa,0x4a,0xa0,0x5e,0xe0,0xf4,0x40,0x4a,0xa0,0xe0,0x0,0x4a,0xaa,0xea,0xa0,0xa,0xaa,0xaa,0xa0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x4a,0xa0,0xe0,0x0,0xa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0xaa,0xa0,0xa0,0x0,0xaa,0xa0,0xa0,0x0,0xa0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0xb,0xa,0xa1,0x1,0x1e,0xb,0xb4,0xb,0xb5,0xa1,0x15,0x1f,0xf4,0xb5,0x54,0xb,0xbe,0xab,0xb4,0x1e,0xea,0xbe,0xe0,0xbf,0xf4,0xb5,0x54,0xfe,0xe0,0xf4,0x40,0xa,0xa1,0xa0,0x1,0xb,0xb4,0xa1,0x14,0xa1,0x15,0x1,0x15,0xb5,0x54,0x15,0x54,0xab,0xb4,0xa1,0x14,0xbe,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0x1,0x1e,0xb,0xb4,0x14,0x4a,0x1e,0xe0,0x1f,0xf4,0xb5,0x54,0x5e,0xe0,0xf4,0x40,0x1e,0xea,0xbe,0xe0,0x4a,0xaa,0xea,0xa0,0xfe,0xe0,0xf4,0x40,0xea,0xa0,0xe0,0x0,0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xa1,0x14,0x1,0x14,0xb4,0x40,0x14,0x40,0x15,0x54,0x15,0x54,0x54,0x40,0x54,0x40,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,
0xb,0xb4,0xa1,0x14,0x1e,0xe0,0xb4,0x40,0xb5,0x54,0x15,0x54,0xf4,0x40,0x54,0x40,0xbe,0xe0,0xb4,0x40,0xea,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xa1,0x14,0x1,0x14,0xb4,0x40,0x14,0x40,0x15,0x54,0x15,0x54,0x54,0x40,0x54,0x40,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0x1e,0xe0,0xb4,0x40,0x4a,0xa0,0xe0,0x0,0xf4,0x40,0x54,0x40,0xe0,0x0,0x40,0x0,0xea,0xa0,0xe0,0x0,0xaa,0xa0,0xa0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0xb4,0x40,0x14,0x40,0xe0,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x14,0x40,0x14,0x40,0x40,0x0,0x40,0x0,0x54,0x40,0x54,0x40,0x40,0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0xe0,0x0,0x40,0x0,0xa0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
};

unsigned char lookUpTable_CPU [4096] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x3,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x3,0x2,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x3,0x2,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x0,0x1,0x3,0x3,0x3,0x3,0x3,0x2,0x2,0x3,0x3,0x3,0x3,0x3,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x0,0x0,0x2,0x2,0x2,0x2,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x1,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x3,0x2,0x2,0x2,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,
0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x1,0x1,0x1,0x1,0x3,0x2,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x1,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x1,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x0,0x0,0x2,0x2,0x2,0x2,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x1,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x3,0x2,0x2,0x2,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x0,0x1,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x1,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x1,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,
0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
};

void ByteToBitCell(char* in, unsigned char* out, int row, int col, int colInBytes){
  memset(out,0,row*colInBytes*sizeof(char));
  for(int i = 0; i < row; i ++){
    for(int j = 0; j < colInBytes; j++){
      for(int k = 0; k < BYTES_WINDOW; k ++){
        //TODO: care about padding if remaining bits exist
        out[j+i*colInBytes] |= (in[k + j*BYTES_WINDOW + i*col] << (BYTES_WINDOW-k-1));
      }
    }
  }
}
void BitCellToByte(unsigned char* in, char* out, int row, int col, int colInBytes){
  for(int i = 0; i < row; i ++){
    for(int j = 0; j < colInBytes; j++){
      for(int k = 0; k < BYTES_WINDOW; k ++){
        if((k + j*BYTES_WINDOW + i*col) < row*col){
          out[k + j*BYTES_WINDOW + i*col] = (in[j+i*colInBytes] >> (BYTES_WINDOW-k-1)) & 0x01;
        }
      }
    }
  }
}
//helper function to convert loopUpTable to compact 
void LookUpTableToFileCompact() {
  FILE* fptr;
  fptr = fopen("lookUpTable_compact.cuh","w");
  fprintf(fptr,"__constant__ __device__ unsigned char lookUpTable [1024] = {\n");
  unsigned int i = 0;
  for (i = 0; i < 1024; i++){
    unsigned char state = 0x00;
    for(int j = 0; j < 4; j++){
      state |= ((lookUpTable_CPU[i*4 + j] & 0x03) << (6-j*2));
    }
    fprintf(fptr,"0x%x,", state);
    if(i%256==255){
      fprintf(fptr,"\n");
    }
  }
  fprintf(fptr,"};\n");
  fclose(fptr);
}
//helper function to build loopUpTable header file
void LookUpTableToFile() {
  FILE* fptr;
  fptr = fopen("lookUpTable.cuh","w");
  fprintf(fptr,"__constant__ __device__ unsigned char lookUpTable [4096] = {\n");
  unsigned int tableIndex = 0;
  for (tableIndex = 0; tableIndex < 4096; tableIndex++){
    unsigned char state = 0x00;
    for(int i = 0; i < 2; i++){
      char count = 0x00;
      count += COMPUTESTATE(i+0,0,tableIndex);
      count += COMPUTESTATE(i+0,1,tableIndex);
      count += COMPUTESTATE(i+0,2,tableIndex);
      count += COMPUTESTATE(i+1,0,tableIndex);
      char centerState = COMPUTESTATE(i+1,1,tableIndex);
      count += COMPUTESTATE(i+1,2,tableIndex);
      count += COMPUTESTATE(i+2,0,tableIndex);
      count += COMPUTESTATE(i+2,1,tableIndex);
      count += COMPUTESTATE(i+2,2,tableIndex);
      state |= (LIVECHECK(count,centerState)<<(1-i));
    }
    fprintf(fptr,"0x%x,", state);
    if(tableIndex%256==255){
      fprintf(fptr,"\n");
    }
  }
  fprintf(fptr,"};\n");
  fclose(fptr);
}
__global__ void InitLookUpTable(unsigned char* h_lookUpTable) {
  unsigned int tableIndex = blockIdx.x*blockDim.x + threadIdx.x;
  if(tableIndex < 4096){
   unsigned char state = 0x00;
   for(int i = 0; i < 2; i++){
     char count = 0x00;
     count += COMPUTESTATE(i+0,0,tableIndex);
     count += COMPUTESTATE(i+0,1,tableIndex);
     count += COMPUTESTATE(i+0,2,tableIndex);
     count += COMPUTESTATE(i+1,0,tableIndex);
     char centerState = COMPUTESTATE(i+1,1,tableIndex);
     count += COMPUTESTATE(i+1,2,tableIndex);
     count += COMPUTESTATE(i+2,0,tableIndex);
     count += COMPUTESTATE(i+2,1,tableIndex);
     count += COMPUTESTATE(i+2,2,tableIndex);
     state |= (LIVECHECK(count,centerState)<<(1-i));
   }
   h_lookUpTable[tableIndex] = state;
  }
}
__global__ void kernal(unsigned char* outboard, unsigned char* inboard, const int nrows, const int ncolsInBytes, const int noRemainBits){
  int ix = (threadIdx.x + blockIdx.x*blockDim.x)*BYTES_PER_THREAD;
  int iy = threadIdx.y + blockIdx.y*blockDim.y;
  if(ix<ncolsInBytes && iy<nrows){
    int lx = (ix+ncolsInBytes-1)%ncolsInBytes;
    int uy = (iy+nrows-1)%nrows;
    int dy = (iy+1)%nrows;
    uint row0 = (uint) inboard[lx+ncolsInBytes*uy] << 16;
    uint row1 = (uint) inboard[lx+ncolsInBytes*iy] << 16;
    uint row2 = (uint) inboard[lx+ncolsInBytes*dy] << 16;
    row0 |= (uint) inboard[ix+ncolsInBytes*uy] << 8;
    row1 |= (uint) inboard[ix+ncolsInBytes*iy] << 8;
    row2 |= (uint) inboard[ix+ncolsInBytes*dy] << 8;
    int base_x = ix;
    int pre_x;
    for(int i = 0; i < BYTES_PER_THREAD; i++){
      if((base_x + i*BYTES_PER_THREAD) < ncolsInBytes){
        pre_x = ix;
        ix = (ix + 1)%ncolsInBytes;
        row0 |= (uint) inboard[ix+ncolsInBytes*uy];
        row1 |= (uint) inboard[ix+ncolsInBytes*iy];
        row2 |= (uint) inboard[ix+ncolsInBytes*dy];
        if(pre_x == ncolsInBytes-1){
          int mask = ~(0x01<<(noRemainBits + 7));
          row0 &= mask;
          row1 &= mask;
          row2 &= mask;
          row0 |= ((uint) inboard[ix+ncolsInBytes*uy] & 0x80) << noRemainBits;
          row1 |= ((uint) inboard[ix+ncolsInBytes*iy] & 0x80) << noRemainBits;
          row2 |= ((uint) inboard[ix+ncolsInBytes*dy] & 0x80) << noRemainBits;
        }
        unsigned int states0 = ((row0 & 0x1E000) >> 5) | ((row1 & 0x1E000) >> 9) | ((row2 & 0x1E000) >> 13);
        unsigned int states1 = ((row0 & 0x7800) >> 3) | ((row1 & 0x7800) >> 7) | ((row2 & 0x7800) >> 11);
        unsigned int states2 = ((row0 & 0x1E00) >> 1) | ((row1 & 0x1E00) >> 5) | ((row2 & 0x1E00) >> 9);
        unsigned int states3 = ((row0 & 0x780) << 1) | ((row1 & 0x780) >> 3) | ((row2 & 0x780) >> 7);
        unsigned char states0_shift = 6 - 2*(states0 & 0x03);
        unsigned char states1_shift = 6 - 2*(states1 & 0x03);
        unsigned char states2_shift = 6 - 2*(states2 & 0x03);
        unsigned char states3_shift = 6 - 2*(states3 & 0x03);
        outboard[pre_x + ncolsInBytes*iy] = (((lookUpTable[states0 >> 2]>>states0_shift)&0x03)<<6) |
                                            (((lookUpTable[states1 >> 2]>>states1_shift)&0x03)<<4) | 
                                            (((lookUpTable[states2 >> 2]>>states2_shift)&0x03)<<2) | 
                                            (((lookUpTable[states3 >> 2]>>states3_shift)&0x03));
      }
    }
  }
}

////////// Game of life implementation //////////
char* game_of_life_gpu (char* outboard, char* inboard, const int nrows, const int ncols, const int gens_max){
  debug_print("================== DEBUG MODE ===================\n");
  debug_print("we're in game_of_life_gpu! # iters = %d\n", gens_max);
  double timeStampA = getTimeStamp() ;

  // generate compact look up table
  // LookUpTableToFileCompact();
  // cudaDeviceSynchronize();
  // return outboard;

  int ncolsInBytes = ((ncols+BYTES_WINDOW-1)/BYTES_WINDOW);
  int noRemainBits = ncols%BYTES_WINDOW;
  int size = ncolsInBytes*nrows;
  int bytes = size*sizeof(char);
  unsigned char *d_bufA, *d_bufB;
  unsigned char parsed_inboard[size];
  unsigned char parsed_outboard[size];
  ByteToBitCell(inboard, parsed_inboard, nrows, ncols, ncolsInBytes);
  cudaMalloc((void **)&d_bufA,bytes);
  cudaMalloc((void **)&d_bufB,bytes);
  cudaMemcpy( d_bufA, parsed_inboard, bytes, cudaMemcpyHostToDevice);
  //TODO: Hardcode lookupTable in const memory
  // unsigned char* d_lookUpTable;
  // cudaMalloc((void **)&d_lookUpTable,4096*sizeof(unsigned char));
  // InitLookUpTable<<<4, 1024>>>(d_lookUpTable);
  // cudaDeviceSynchronize() ;
  //debug_print("lkt size %d %d\n", 262144*sizeof(unsigned char), sizeof(d_lookUpTable));
  //for (int i = 0; i < 262144; i++){ 
  //  debug_print("index %d\n",i);
  //  for (int ii = 0; ii < 8; ii++) {
  //    debug_print("%d", !!((d_lookUpTable[i] << ii) & 0x80));
  //  }
  //  debug_print("\n");
  //}
  dim3 block(32,32);
  dim3 grid(((ncolsInBytes+BYTES_PER_THREAD-1)/BYTES_PER_THREAD+block.x-1)/block.x,(nrows + block.y-1)/block.y);
  for (int curgen = 0; curgen < gens_max; curgen++){
    kernal<<<grid,block>>>(d_bufB, d_bufA, nrows, ncolsInBytes, noRemainBits);
    cudaDeviceSynchronize() ;
    //SWAP BOARDS
    unsigned char * temp = d_bufA;
    d_bufA = d_bufB;
    d_bufB = temp;
  }
  cudaMemcpy(parsed_outboard, d_bufA, bytes, cudaMemcpyDeviceToHost);
  BitCellToByte(parsed_outboard, outboard, nrows, ncols, ncolsInBytes);
    
  double timeStampD = getTimeStamp() ;
  double total_time = timeStampD - timeStampA;
  printf("GPU game_of_life: %.6f\n", total_time);
  return outboard;
}
#endif //GPU_IMPL_VERSION == 5



////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// LOOKUP TABLE 2 BIT CONST MEM IMPLEMENTATION, NO OPTIMIZATION ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
#if GPU_IMPL_VERSION == 4
#define BYTES_WINDOW 8
#define BYTES_PER_THREAD 1
#define LIVECHECK(count, state) ((!state && (count == (char) 3)) ||(state && (count >= 2) && (count <= 3)))
#define COMPUTESTATE(x,y,index) ((index >> ((3 * 4 - 1) - (x+4*y))) & 0x1)

__constant__ __device__ unsigned char lookUpTable [4096] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x3,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x3,0x2,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x3,0x2,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x0,0x1,0x3,0x3,0x3,0x3,0x3,0x2,0x2,0x3,0x3,0x3,0x3,0x3,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x0,0x0,0x2,0x2,0x2,0x2,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x1,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x3,0x2,0x2,0x2,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,
0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x1,0x1,0x1,0x1,0x3,0x2,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x1,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x1,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x0,0x0,0x2,0x2,0x2,0x2,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x1,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x3,0x2,0x2,0x2,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x0,0x1,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x1,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x1,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,
0x0,0x0,0x0,0x1,0x0,0x1,0x3,0x2,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x2,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x2,0x2,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x2,0x3,0x2,0x3,0x1,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x3,0x2,0x3,0x2,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
};

void ByteToBitCell(char* in, unsigned char* out, int row, int col, int colInBytes){
  memset(out,0,row*colInBytes*sizeof(char));
  for(int i = 0; i < row; i ++){
    for(int j = 0; j < colInBytes; j++){
      for(int k = 0; k < BYTES_WINDOW; k ++){
        //TODO: care about padding if remaining bits exist
        out[j+i*colInBytes] |= (in[k + j*BYTES_WINDOW + i*col] << (BYTES_WINDOW-k-1));
      }
    }
  }
}
void BitCellToByte(unsigned char* in, char* out, int row, int col, int colInBytes){
  for(int i = 0; i < row; i ++){
    for(int j = 0; j < colInBytes; j++){
      for(int k = 0; k < BYTES_WINDOW; k ++){
        if((k + j*BYTES_WINDOW + i*col) < row*col){
          out[k + j*BYTES_WINDOW + i*col] = (in[j+i*colInBytes] >> (BYTES_WINDOW-k-1)) & 0x01;
        }
      }
    }
  }
}
//helper function to build loopUpTable header file
void LookUpTableToFile() {
  FILE* fptr;
  fptr = fopen("lookUpTable.cuh","w");
  fprintf(fptr,"__constant__ __device__ unsigned char lookUpTable [4096] = {\n");
  unsigned int tableIndex = 0;
  for (tableIndex = 0; tableIndex < 4096; tableIndex++){
    unsigned char state = 0x00;
    for(int i = 0; i < 2; i++){
      char count = 0x00;
      count += COMPUTESTATE(i+0,0,tableIndex);
      count += COMPUTESTATE(i+0,1,tableIndex);
      count += COMPUTESTATE(i+0,2,tableIndex);
      count += COMPUTESTATE(i+1,0,tableIndex);
      char centerState = COMPUTESTATE(i+1,1,tableIndex);
      count += COMPUTESTATE(i+1,2,tableIndex);
      count += COMPUTESTATE(i+2,0,tableIndex);
      count += COMPUTESTATE(i+2,1,tableIndex);
      count += COMPUTESTATE(i+2,2,tableIndex);
      state |= (LIVECHECK(count,centerState)<<(1-i));
    }
    fprintf(fptr,"0x%x,", state);
    if(tableIndex%256==255){
      fprintf(fptr,"\n");
    }
  }
  fprintf(fptr,"};\n");
  fclose(fptr);
}
__global__ void InitLookUpTable(unsigned char* h_lookUpTable) {
  unsigned int tableIndex = blockIdx.x*blockDim.x + threadIdx.x;
  if(tableIndex < 4096){
   unsigned char state = 0x00;
   for(int i = 0; i < 2; i++){
     char count = 0x00;
     count += COMPUTESTATE(i+0,0,tableIndex);
     count += COMPUTESTATE(i+0,1,tableIndex);
     count += COMPUTESTATE(i+0,2,tableIndex);
     count += COMPUTESTATE(i+1,0,tableIndex);
     char centerState = COMPUTESTATE(i+1,1,tableIndex);
     count += COMPUTESTATE(i+1,2,tableIndex);
     count += COMPUTESTATE(i+2,0,tableIndex);
     count += COMPUTESTATE(i+2,1,tableIndex);
     count += COMPUTESTATE(i+2,2,tableIndex);
     state |= (LIVECHECK(count,centerState)<<(1-i));
   }
   h_lookUpTable[tableIndex] = state;
  }
}
__global__ void kernal(unsigned char* outboard, unsigned char* inboard, const int nrows, const int ncolsInBytes, const int noRemainBits){
  int ix = (threadIdx.x + blockIdx.x*blockDim.x)*BYTES_PER_THREAD;
  int iy = threadIdx.y + blockIdx.y*blockDim.y;
  if(ix<ncolsInBytes && iy<nrows){
    int lx = (ix+ncolsInBytes-1)%ncolsInBytes;
    int uy = (iy+nrows-1)%nrows;
    int dy = (iy+1)%nrows;
    uint row0 = (uint) inboard[lx+ncolsInBytes*uy] << 16;
    uint row1 = (uint) inboard[lx+ncolsInBytes*iy] << 16;
    uint row2 = (uint) inboard[lx+ncolsInBytes*dy] << 16;
    row0 |= (uint) inboard[ix+ncolsInBytes*uy] << 8;
    row1 |= (uint) inboard[ix+ncolsInBytes*iy] << 8;
    row2 |= (uint) inboard[ix+ncolsInBytes*dy] << 8;
    int base_x = ix;
    int pre_x;
    for(int i = 0; i < BYTES_PER_THREAD; i++){
      if((base_x + i*BYTES_PER_THREAD) < ncolsInBytes){
        pre_x = ix;
        ix = (ix + 1)%ncolsInBytes;
        row0 |= (uint) inboard[ix+ncolsInBytes*uy];
        row1 |= (uint) inboard[ix+ncolsInBytes*iy];
        row2 |= (uint) inboard[ix+ncolsInBytes*dy];
        if(pre_x == ncolsInBytes-1){
          int mask = ~(0x01<<(noRemainBits + 7));
          row0 &= mask;
          row1 &= mask;
          row2 &= mask;
          row0 |= ((uint) inboard[ix+ncolsInBytes*uy] & 0x80) << noRemainBits;
          row1 |= ((uint) inboard[ix+ncolsInBytes*iy] & 0x80) << noRemainBits;
          row2 |= ((uint) inboard[ix+ncolsInBytes*dy] & 0x80) << noRemainBits;
        }
        // unsigned int statesLow = ((row0 & 0x1F800) << 1) | ((row1 & 0x1F800) >> 5) | ((row2 & 0x1F800) >> 11);
        // unsigned int statesHigh = ((row0 & 0x1F80) << 5) | ((row1 & 0x1F80) >> 1) | ((row2 & 0x1F80) >> 7);
        // outboard[pre_x + ncolsInBytes*iy] = (lookUpTable[statesLow]<<4)|lookUpTable[statesHigh];
        unsigned int states0 = ((row0 & 0x1E000) >> 5) | ((row1 & 0x1E000) >> 9) | ((row2 & 0x1E000) >> 13);
        unsigned int states1 = ((row0 & 0x7800) >> 3) | ((row1 & 0x7800) >> 7) | ((row2 & 0x7800) >> 11);
        unsigned int states2 = ((row0 & 0x1E00) >> 1) | ((row1 & 0x1E00) >> 5) | ((row2 & 0x1E00) >> 9);
        unsigned int states3 = ((row0 & 0x780) << 1) | ((row1 & 0x780) >> 3) | ((row2 & 0x780) >> 7);
        outboard[pre_x + ncolsInBytes*iy] = (lookUpTable[states0]<<6) |
                                            (lookUpTable[states1]<<4) | 
                                            (lookUpTable[states2]<<2) | 
                                            lookUpTable[states3];
      }
    }
  }
}

////////// Game of life implementation //////////
char* game_of_life_gpu (char* outboard, char* inboard, const int nrows, const int ncols, const int gens_max){
  debug_print("================== DEBUG MODE ===================\n");
  debug_print("we're in game_of_life_gpu! # iters = %d\n", gens_max);
  double timeStampA = getTimeStamp() ;

  int ncolsInBytes = ((ncols+BYTES_WINDOW-1)/BYTES_WINDOW);
  int noRemainBits = ncols%BYTES_WINDOW;
  int size = ncolsInBytes*nrows;
  int bytes = size*sizeof(char);
  unsigned char *d_bufA, *d_bufB;
  unsigned char parsed_inboard[size];
  unsigned char parsed_outboard[size];
  ByteToBitCell(inboard, parsed_inboard, nrows, ncols, ncolsInBytes);
  cudaMalloc((void **)&d_bufA,bytes);
  cudaMalloc((void **)&d_bufB,bytes);
  cudaMemcpy( d_bufA, parsed_inboard, bytes, cudaMemcpyHostToDevice);
  //TODO: Hardcode lookupTable in const memory
  // unsigned char* d_lookUpTable;
  // cudaMalloc((void **)&d_lookUpTable,4096*sizeof(unsigned char));
  // InitLookUpTable<<<4, 1024>>>(d_lookUpTable);
  // cudaDeviceSynchronize() ;
  //debug_print("lkt size %d %d\n", 262144*sizeof(unsigned char), sizeof(d_lookUpTable));
  //for (int i = 0; i < 262144; i++){ 
  //  debug_print("index %d\n",i);
  //  for (int ii = 0; ii < 8; ii++) {
  //    debug_print("%d", !!((d_lookUpTable[i] << ii) & 0x80));
  //  }
  //  debug_print("\n");
  //}
  dim3 block(32,32);
  dim3 grid(((ncolsInBytes+BYTES_PER_THREAD-1)/BYTES_PER_THREAD+block.x-1)/block.x,(nrows + block.y-1)/block.y);
  for (int curgen = 0; curgen < gens_max; curgen++){
    kernal<<<grid,block>>>(d_bufB, d_bufA, nrows, ncolsInBytes, noRemainBits);
    cudaDeviceSynchronize() ;
    //SWAP BOARDS
    unsigned char * temp = d_bufA;
    d_bufA = d_bufB;
    d_bufB = temp;
  }
  cudaMemcpy(parsed_outboard, d_bufA, bytes, cudaMemcpyDeviceToHost);
  BitCellToByte(parsed_outboard, outboard, nrows, ncols, ncolsInBytes);
    
  double timeStampD = getTimeStamp() ;
  double total_time = timeStampD - timeStampA;
  printf("GPU game_of_life: %.6f\n", total_time);
  return outboard;
}
#endif //GPU_IMPL_VERSION == 4

////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// LOOKUP TABLE 4 bit IMPLEMENTATION, NO OPTIMIZATION ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
#if GPU_IMPL_VERSION == 3 
#define BYTES_WINDOW 8
#define BYTES_PER_THREAD 1
#define LIVECHECK(count, state) ((!state && (count == (char) 3)) ||(state && (count >= 2) && (count <= 3)))
#define COMPUTESTATE(x,y,index) ((index >> ((3 * 6 - 1) - (x+6*y))) & 0x1)
void ByteToBitCell(char* in, unsigned char* out, int row, int col, int colInBytes){
  memset(out,0,row*colInBytes*sizeof(char));
  for(int i = 0; i < row; i ++){
    for(int j = 0; j < colInBytes; j++){
      for(int k = 0; k < BYTES_WINDOW; k ++){
        //TODO: care about padding if remaining bits exist
        out[j+i*colInBytes] |= (in[k + j*BYTES_WINDOW + i*col] << (BYTES_WINDOW-k-1));
      }
    }
  }
}
void BitCellToByte(unsigned char* in, char* out, int row, int col, int colInBytes){
  for(int i = 0; i < row; i ++){
    for(int j = 0; j < colInBytes; j++){
      for(int k = 0; k < BYTES_WINDOW; k ++){
        if((k + j*BYTES_WINDOW + i*col) < row*col){
          out[k + j*BYTES_WINDOW + i*col] = (in[j+i*colInBytes] >> (BYTES_WINDOW-k-1)) & 0x01;
        }
      }
    }
  }
}
__global__ void InitLookUpTable(unsigned char* lookUpTable) {
  unsigned int tableIndex = blockIdx.x*blockDim.x + threadIdx.x;
  if(tableIndex < 262144){
   unsigned char state = 0x00;
   for(int i = 0; i < 4; i++){
     char count = 0x00;
     count += COMPUTESTATE(i+0,0,tableIndex);
     count += COMPUTESTATE(i+0,1,tableIndex);
     count += COMPUTESTATE(i+0,2,tableIndex);
     count += COMPUTESTATE(i+1,0,tableIndex);
     char centerState = COMPUTESTATE(i+1,1,tableIndex);
     count += COMPUTESTATE(i+1,2,tableIndex);
     count += COMPUTESTATE(i+2,0,tableIndex);
     count += COMPUTESTATE(i+2,1,tableIndex);
     count += COMPUTESTATE(i+2,2,tableIndex);
     state |= (LIVECHECK(count,centerState)<<(3-i));
   }
   lookUpTable[tableIndex] = state;
  }
}
__global__ void kernal(unsigned char* outboard, unsigned char* inboard, const int nrows, const int ncolsInBytes, const int noRemainBits, const unsigned char* lookUpTable){
	int ix = (threadIdx.x + blockIdx.x*blockDim.x)*BYTES_PER_THREAD;
	int iy = threadIdx.y + blockIdx.y*blockDim.y;
  if(ix<ncolsInBytes && iy<nrows){
    int lx = (ix+ncolsInBytes-1)%ncolsInBytes;
	  int uy = (iy+nrows-1)%nrows;
	  int dy = (iy+1)%nrows;
    uint row0 = (uint) inboard[lx+ncolsInBytes*uy] << 16;
    uint row1 = (uint) inboard[lx+ncolsInBytes*iy] << 16;
    uint row2 = (uint) inboard[lx+ncolsInBytes*dy] << 16;
    row0 |= (uint) inboard[ix+ncolsInBytes*uy] << 8;
    row1 |= (uint) inboard[ix+ncolsInBytes*iy] << 8;
    row2 |= (uint) inboard[ix+ncolsInBytes*dy] << 8;
    int base_x = ix;
	  int pre_x;
    for(int i = 0; i < BYTES_PER_THREAD; i++){
      if((base_x + i*BYTES_PER_THREAD) < ncolsInBytes){
        pre_x = ix;
        ix = (ix + 1)%ncolsInBytes;
        row0 |= (uint) inboard[ix+ncolsInBytes*uy];
        row1 |= (uint) inboard[ix+ncolsInBytes*iy];
        row2 |= (uint) inboard[ix+ncolsInBytes*dy];
        if(pre_x == ncolsInBytes-1){
          int mask = ~(0x01<<(noRemainBits + 7));
          row0 &= mask;
          row1 &= mask;
          row2 &= mask;
          row0 |= ((uint) inboard[ix+ncolsInBytes*uy] & 0x80) << noRemainBits;
          row1 |= ((uint) inboard[ix+ncolsInBytes*iy] & 0x80) << noRemainBits;
          row2 |= ((uint) inboard[ix+ncolsInBytes*dy] & 0x80) << noRemainBits;
        }
        unsigned int statesLow = ((row0 & 0x1F800) << 1) | ((row1 & 0x1F800) >> 5) | ((row2 & 0x1F800) >> 11);
        unsigned int statesHigh = ((row0 & 0x1F80) << 5) | ((row1 & 0x1F80) >> 1) | ((row2 & 0x1F80) >> 7);
        outboard[pre_x + ncolsInBytes*iy] = (lookUpTable[statesLow]<<4)|lookUpTable[statesHigh];
      }
    }
  }
}

////////// Game of life implementation //////////
char* game_of_life_gpu (char* outboard, char* inboard, const int nrows, const int ncols, const int gens_max){
  debug_print("================== DEBUG MODE ===================\n");
  debug_print("we're in game_of_life_gpu! # iters = %d\n", gens_max);
  double timeStampA = getTimeStamp() ;

  int ncolsInBytes = ((ncols+BYTES_WINDOW-1)/BYTES_WINDOW);
  int noRemainBits = ncols%BYTES_WINDOW;
	int size = ncolsInBytes*nrows;
	int bytes = size*sizeof(char);
	unsigned char *d_bufA, *d_bufB;
  unsigned char parsed_inboard[size];
  unsigned char parsed_outboard[size];
  ByteToBitCell(inboard, parsed_inboard, nrows, ncols, ncolsInBytes);
	cudaMalloc((void **)&d_bufA,bytes);
	cudaMalloc((void **)&d_bufB,bytes);
	cudaMemcpy( d_bufA, parsed_inboard, bytes, cudaMemcpyHostToDevice);
  //TODO: Hardcode lookupTable in const memory
  unsigned char* d_lookUpTable;
	cudaMalloc((void **)&d_lookUpTable,262144*sizeof(unsigned char));
  InitLookUpTable<<<256,1024>>>(d_lookUpTable);
  cudaDeviceSynchronize() ;
  //debug_print("lkt size %d %d\n", 262144*sizeof(unsigned char), sizeof(d_lookUpTable));
  //for (int i = 0; i < 262144; i++){ 
  //  debug_print("index %d\n",i);
  //  for (int ii = 0; ii < 8; ii++) {
  //    debug_print("%d", !!((d_lookUpTable[i] << ii) & 0x80));
  //  }
  //  debug_print("\n");
  //}
	dim3 block(32,32);
	dim3 grid(((ncolsInBytes+BYTES_PER_THREAD-1)/BYTES_PER_THREAD+block.x-1)/block.x,(nrows + block.y-1)/block.y);
	for (int curgen = 0; curgen < gens_max; curgen++){
		kernal<<<grid,block>>>(d_bufB, d_bufA, nrows, ncolsInBytes, noRemainBits, d_lookUpTable);
    cudaDeviceSynchronize() ;
    //SWAP BOARDS
    unsigned char * temp = d_bufA;
    d_bufA = d_bufB;
		d_bufB = temp;
	}
	cudaMemcpy(parsed_outboard, d_bufA, bytes, cudaMemcpyDeviceToHost);
  BitCellToByte(parsed_outboard, outboard, nrows, ncols, ncolsInBytes);
    
  double timeStampD = getTimeStamp() ;
	double total_time = timeStampD - timeStampA;
	printf("GPU game_of_life: %.6f\n", total_time);
	return outboard;
}
#endif //GPU_IMPL_VERSION == 3
////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// BIT IMPLEMENTATION, NO OPTIMIZATION ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
#if GPU_IMPL_VERSION == 2
#define BYTES_WINDOW 8
#define BYTES_PER_THREAD 1   
#define LIVECHECK(count, state) (!state && (count == (char) 3)) ||(state && (count >= 2) && (count <= 3))
void ByteToBitCell(char* in, unsigned char* out, int row, int col, int colInBytes){
  memset(out,0,row*colInBytes*sizeof(char));
  for(int i = 0; i < row; i ++){
    for(int j = 0; j < colInBytes; j++){
      for(int k = 0; k < BYTES_WINDOW; k ++){
        //TODO: care about padding if remaining bits exist
        out[j+i*colInBytes] |= (in[k + j*BYTES_WINDOW + i*col] << (BYTES_WINDOW-k-1));
//        printf("%d ", in[k + j*BYTES_WINDOW + i*col]);
//        for (int ii = 0; ii < 8; ii++) {
//          printf("%d", !!((out[j+i*colInBytes] << ii) & 0x80));
//        }
//        printf("\n");
      }
//      printf("\n\n");
    }
  }
}
void BitCellToByte(unsigned char* in, char* out, int row, int col, int colInBytes){
  for(int i = 0; i < row; i ++){
    for(int j = 0; j < colInBytes; j++){
      for(int k = 0; k < BYTES_WINDOW; k ++){
        if((k + j*BYTES_WINDOW + i*col) < row*col){
          out[k + j*BYTES_WINDOW + i*col] = (in[j+i*colInBytes] >> (BYTES_WINDOW-k-1)) & 0x01;
        }
      }
    }
  }
}
__global__ void kernal(unsigned char* outboard, unsigned char* inboard, const int nrows, const int ncolsInBytes, const int noRemainBits){
	int ix = (threadIdx.x + blockIdx.x*blockDim.x)*BYTES_PER_THREAD;
	int iy = threadIdx.y + blockIdx.y*blockDim.y;
  if(ix<ncolsInBytes && iy<nrows){
    int lx = (ix+ncolsInBytes-1)%ncolsInBytes;
	  int uy = (iy+nrows-1)%nrows;
	  int dy = (iy+1)%nrows;
    uint row0 = (uint) inboard[lx+ncolsInBytes*uy] << 16;
    uint row1 = (uint) inboard[lx+ncolsInBytes*iy] << 16;
    uint row2 = (uint) inboard[lx+ncolsInBytes*dy] << 16;
    row0 |= (uint) inboard[ix+ncolsInBytes*uy] << 8;
    row1 |= (uint) inboard[ix+ncolsInBytes*iy] << 8;
    row2 |= (uint) inboard[ix+ncolsInBytes*dy] << 8;
    char result = 0x00;
    char count = 0x00;
    int base_x = ix;
	  int pre_x;
    for(int i = 0; i < BYTES_PER_THREAD; i++){
      if((base_x + i*BYTES_PER_THREAD) < ncolsInBytes){
        pre_x = ix;
        ix = (ix + 1)%ncolsInBytes;
        row0 |= (uint) inboard[ix+ncolsInBytes*uy];
        row1 |= (uint) inboard[ix+ncolsInBytes*iy];
        row2 |= (uint) inboard[ix+ncolsInBytes*dy];
        if(pre_x == ncolsInBytes-1){
          int mask = ~(0x01<<(noRemainBits + 7));
          row0 &= mask;
          row1 &= mask;
          row2 &= mask;
          row0 |= ((uint) inboard[ix+ncolsInBytes*uy] & 0x80) << noRemainBits;
          row1 |= ((uint) inboard[ix+ncolsInBytes*iy] & 0x80) << noRemainBits;
          row2 |= ((uint) inboard[ix+ncolsInBytes*dy] & 0x80) << noRemainBits;
        }
        result = 0x00;
        for(int j = 0; j < BYTES_WINDOW; j++){
          result <<= 1;
          count = ((row0 & 0x010000) >> 16) + ((row0 & 0x008000) >> 15) + ((row0 & 0x004000) >> 14) +
                  ((row1 & 0x010000) >> 16) +                             ((row1 & 0x004000) >> 14) +
                  ((row2 & 0x010000) >> 16) + ((row2 & 0x008000) >> 15) + ((row2 & 0x004000) >> 14);
          result |= LIVECHECK(count,(row1 & 0x008000));
          row0 <<= 1;
          row1 <<= 1;
          row2 <<= 1;
        }
        outboard[pre_x + ncolsInBytes*iy] = result;
      }
    }
  }
}

////////// Game of life implementation //////////
char* game_of_life_gpu (char* outboard, char* inboard, const int nrows, const int ncols, const int gens_max){
  debug_print("================== DEBUG MODE ===================\n");
  debug_print("we're in game_of_life_gpu! # iters = %d\n", gens_max);
  double timeStampA = getTimeStamp() ;

  int ncolsInBytes = ((ncols+BYTES_WINDOW-1)/BYTES_WINDOW);
  int noRemainBits = ncols%BYTES_WINDOW;
	int size = ncolsInBytes*nrows;
	int bytes = size*sizeof(char);
	unsigned char *d_bufA, *d_bufB;
  unsigned char parsed_inboard[size];
  unsigned char parsed_outboard[size];
  ByteToBitCell(inboard, parsed_inboard, nrows, ncols, ncolsInBytes);
//  for (int ii = 0; ii < nrows; ii++){ 
//    for (int jj = 0; jj < ncols; jj++){ 
//      printf ("%d", inboard[jj+ii*ncols]);
//    }
//    printf("\n");
//  }
//  printf("\n");
//  for (int ii = 0; ii < nrows; ii++){ 
//    for (int jj = 0; jj < ncolsInBytes; jj++){ 
//      //printf ("%x", parsed_inboard[jj+ii*ncols]&0xff);
//      for (int i = 0; i < 8; i++) {
//        printf("%d", !!((parsed_inboard[jj+ii*ncolsInBytes] << i) & 0x80));
//      }
//    }
//    printf("\n");
//  }
	cudaMalloc((void **)&d_bufA,bytes);
	cudaMalloc((void **)&d_bufB,bytes);
	cudaMemcpy( d_bufA, parsed_inboard, bytes, cudaMemcpyHostToDevice);
	dim3 block(32,32);
	dim3 grid(((ncolsInBytes+BYTES_PER_THREAD-1)/BYTES_PER_THREAD+block.x-1)/block.x,(nrows + block.y-1)/block.y);
	for (int curgen = 0; curgen < gens_max; curgen++){
		kernal<<<grid,block>>>(d_bufB, d_bufA, nrows, ncolsInBytes, noRemainBits);
    cudaDeviceSynchronize() ;
    //SWAP BOARDS
    unsigned char * temp = d_bufA;
    d_bufA = d_bufB;
		d_bufB = temp;
	}
	cudaMemcpy(parsed_outboard, d_bufA, bytes, cudaMemcpyDeviceToHost);
    BitCellToByte(parsed_outboard, outboard, nrows, ncols, ncolsInBytes);
    
  double timeStampD = getTimeStamp() ;
	double total_time = timeStampD - timeStampA;
	printf("GPU game_of_life: %.6f\n", total_time);
	return outboard;
}
#endif //GPU_IMPL_VERSION == 2


////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////...//////// BRUTE FORCE, NO OPTIMIZATION ///////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
#if GPU_IMPL_VERSION == 1
#define LIVECHECK(count, state) (!state && (count == (char) 3)) ||(state && (count >= 2) && (count <= 3))
__global__ void kernal(char* outboard, char* inboard, const int nrows, const int ncols, const int size){
  int ix = threadIdx.x + blockIdx.x*blockDim.x;
  int iy = threadIdx.y + blockIdx.y*blockDim.y;
  int index = ix + blockDim.x*gridDim.x*iy;
  if(ix<ncols && iy<nrows){
    int rx = (ix+1)%ncols;
    int lx = (ix+ncols-1)%ncols;
    int uy = (iy+nrows-1)%nrows;
    int dy = (iy+1)%nrows;
    char state = inboard[index];
    char count = inboard[lx+ncols*uy] + inboard[ix+ncols*uy] + inboard[rx+ncols*uy] + inboard[lx+ncols*iy] + inboard[rx+ncols*iy] + inboard[lx+ncols*dy] + inboard[ix+ncols*dy] + inboard[rx+ncols*dy];
   outboard[index] = LIVECHECK(count,state);
  }
}

////////// Game of life implementation //////////

char* game_of_life_gpu (char* outboard, char* inboard, const int nrows, const int ncols, const int gens_max){
  debug_print("================== DEBUG MODE ===================\n");
  debug_print("we're in game_of_life_gpu! # iters = %d\n", gens_max);
  double timeStampA = getTimeStamp() ;
  int size = ncols*nrows;
  int bytes = size*sizeof(char);
  char *d_bufA, *d_bufB;
  cudaMalloc((void **)&d_bufA,bytes);
  cudaMalloc((void **)&d_bufB,bytes);
  cudaMemcpy( d_bufA, inboard, bytes, cudaMemcpyHostToDevice);
  //cudaMemcpy( d_bufB, outboard, bytes, cudaMemcpyHostToDevice);
  dim3 block(32,32);
  dim3 grid((ncols+block.x-1)/block.x,(nrows + block.y-1)/block.y);
  for (int curgen = 0; curgen < gens_max; curgen++){
    kernal<<<grid,block>>>(d_bufB, d_bufA, nrows, ncols, size);
    //SWAP BOARDS
    char * temp = d_bufA;
    d_bufA = d_bufB;
    d_bufB = temp;
  }
  cudaMemcpy(outboard, d_bufA, bytes, cudaMemcpyDeviceToHost);

  double timeStampD = getTimeStamp() ;
  double total_time = timeStampD - timeStampA;
  printf("GPU game_of_life: %.6f\n", total_time);
  return outboard;
}
#endif //GPU_IMPL_VERSION == 1

